/* This is a generated file! */
use once_cell::sync::Lazy;
use uuid::Uuid;
use crate::matcher::{LexMatcher, extract_nested_block_comment};
use crate::token::Token;
use crate::regex::RegexModeGroup;
use crate::dialect::Dialect;

pub static EXASOL_LEXERS: Lazy<Vec<LexMatcher>> = Lazy::new(|| { vec![

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "whitespace",
        r#"[^\S\r\n]+"#,
        Token::whitespace_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "inline_comment",
        r#"--[^\n]*"#,
        Token::comment_token,
        None,
        None,
        Some(vec![String::from("-"), String::from("-")]),
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |input| input.starts_with(['#','-','/']),
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "block_comment",
        r#"\/\*([^\*]|\*(?!\/))*\*\/"#,
        Token::comment_token,
        Some(Box::new(
    LexMatcher::regex_subdivider(
        Dialect::Exasol,
        "newline",
        r#"\r\n|\n"#,
        Token::newline_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ))),
        Some(Box::new(
    LexMatcher::regex_subdivider(
        Dialect::Exasol,
        "whitespace",
        r#"[^\S\r\n]+"#,
        Token::whitespace_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ))),
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        Some(extract_nested_block_comment),
        |input| input.starts_with("/"),
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "single_quote",
        r#"'([^']|'')*'"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        Some((r#"'((?:[^']|'')*)'"#.to_string(), RegexModeGroup::Index(1))),
        Some((r#"''"#.to_string(), r#"'"#.to_string())),
        None,
        None,
        |input| match input.as_bytes() {
        [b'\'', ..] => true,                     // Single quote case
        [b'R' | b'r', b'\'', ..] => true,        // r' or R'
        [b'B' | b'b', b'\'', ..] => true,        // b' or B'
        [b'R' | b'r', b'B' | b'b', b'\'', ..] => true, // rb', RB', etc.
        [b'B' | b'b', b'R' | b'r', b'\'', ..] => true, // br', Br', etc.
        _ => false,
    },
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "double_quote",
        r#""([^"]|"")*""#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        Some((r#""((?:[^"]|"")*)""#.to_string(), RegexModeGroup::Index(1))),
        Some((r#""""#.to_string(), r#"""#.to_string())),
        None,
        None,
        |input| match input.as_bytes() {
        [b'"', ..] => true,                     // Just a double quote
        [b'R' | b'r', b'"', ..] => true,        // r" or R"
        [b'B' | b'b', b'"', ..] => true,        // b" or B"
        [b'R' | b'r', b'B' | b'b', b'"', ..] => true, // rb", RB", etc.
        [b'B' | b'b', b'R' | b'r', b'"', ..] => true, // br", Br", etc.
        _ => false,
    },
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "back_quote",
        r#"`(?:[^`\\]|\\.)*`"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        Some((r#"`((?:[^`\\]|\\.)*)`"#.to_string(), RegexModeGroup::Index(1))),
        Some((r#"\\`"#.to_string(), r#"`"#.to_string())),
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "dollar_quote",
        r#"\$(\w*)\$(.*?)\$\1\$"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        Some((r#"\$(\w*)\$(.*?)\$\1\$"#.to_string(), RegexModeGroup::Index(2))),
        None,
        None,
        None,
        |input| input.starts_with("$"),
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "numeric_literal",
        r#"(?>\d+\.\d+|\d+\.(?![\.\w])|\.\d+|\d+)(\.?[eE][+-]?\d+)?((?<=\.)|(?=\b))"#,
        Token::literal_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |input| input.starts_with(['x','X','.','0','1','2','3','4','5','6','7','8','9']),
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "obevo_annotation",
        r#"////\s*(CHANGE|BODY|METADATA)[^\n]*"#,
        Token::comment_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "glob_operator",
        "~~~",
        Token::comparison_operator_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "lua_nested_quotes",
        r#"\[={1,3}\[.*\]={1,3}\]"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "lua_multiline_quotes",
        r#"\[{2}([^\[\\]|\\.)*\]{2}"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "escaped_identifier",
        r#"\[\w+\]"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        Some((r#"\[(\w+)\]"#.to_string(), RegexModeGroup::Index(1))),
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "udf_param_dot_syntax",
        r#"\.{3}"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "range_operator",
        r#"\.{2}"#,
        Token::symbol_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "hash",
        "#",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "walrus_operator",
        ":=",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "function_script_terminator",
        r#"\n/\n|\n/$"#,
        Token::symbol_token,
        Some(Box::new(
    LexMatcher::regex_subdivider(
        Dialect::Exasol,
        "newline",
        r#"(\n|\r\n)+"#,
        Token::newline_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ))),
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "at_sign_literal",
        r#"@[a-zA-Z_][\w]*"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "dollar_literal",
        r#"[$][a-zA-Z0-9_.]*"#,
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "like_operator",
        r#"!?~~?\*?"#,
        Token::comparison_operator_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "newline",
        r#"\r\n|\n"#,
        Token::newline_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "casting_operator",
        "::",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "equals",
        "=",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "greater_than",
        ">",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "less_than",
        "<",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "not",
        "!",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "dot",
        ".",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "comma",
        ",",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "plus",
        "+",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "minus",
        "-",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "divide",
        "/",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "percent",
        "%",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "question",
        "?",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "ampersand",
        "&",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "vertical_bar",
        "|",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "caret",
        "^",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "star",
        "*",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "start_bracket",
        "(",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "end_bracket",
        ")",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "start_square_bracket",
        "[",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "end_square_bracket",
        "]",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "start_curly_bracket",
        "{",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "end_curly_bracket",
        "}",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "colon",
        ":",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::string_lexer(
        Dialect::Exasol,
        "semicolon",
        ";",
        Token::code_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
    ),

    LexMatcher::regex_lexer(
        Dialect::Exasol,
        "word",
        r#"[0-9a-zA-Z_]+"#,
        Token::word_token,
        None,
        None,
        None,
        None,
        Uuid::new_v4().to_string(),
        None,
        None,
        None,
        None,
        |_| true,
        None,
    ),
]});

pub static EXASOL_KEYWORDS: Lazy<Vec<String>> = Lazy::new(|| { vec![
    "CURRENT_USER".to_string(),
    "SAVEPOINT".to_string(),
    "CONSTANT".to_string(),
    "UNTIL".to_string(),
    "SET".to_string(),
    "OUTPUT".to_string(),
    "UNNEST".to_string(),
    "RETURNED_LENGTH".to_string(),
    "DATE".to_string(),
    "STATEMENT".to_string(),
    "CONNECT_BY_ISCYCLE".to_string(),
    "DEC".to_string(),
    "EXIT".to_string(),
    "INSERT".to_string(),
    "REPEAT".to_string(),
    "LARGE".to_string(),
    "UNKNOWN".to_string(),
    "AS".to_string(),
    "RELATIVE".to_string(),
    "ROWS".to_string(),
    "PERMISSION".to_string(),
    "MATCH".to_string(),
    "OVERRIDING".to_string(),
    "REVOKE".to_string(),
    "DOUBLE".to_string(),
    "OLD".to_string(),
    "CHAIN".to_string(),
    "OR".to_string(),
    "YEAR".to_string(),
    "DEFERRABLE".to_string(),
    "DROP".to_string(),
    "CATALOG".to_string(),
    "HOUR".to_string(),
    "LOCATOR".to_string(),
    "INPUT".to_string(),
    "FILE".to_string(),
    "CALL".to_string(),
    "SQL_SMALLINT".to_string(),
    "PARAMETER_SPECIFIC_CATALOG".to_string(),
    "CURRENT".to_string(),
    "CURRENT_STATEMENT".to_string(),
    "PROFILE".to_string(),
    "MINUS".to_string(),
    "AFTER".to_string(),
    "POSITION".to_string(),
    "PLUS".to_string(),
    "NOT".to_string(),
    "PAD".to_string(),
    "PARALLEL_ENABLE".to_string(),
    "SQL_PREPROCESSOR_SCRIPT".to_string(),
    "RECOVERY".to_string(),
    "COLLATION_SCHEMA".to_string(),
    "SCOPE".to_string(),
    "NOCYCLE".to_string(),
    "TRANSACTION".to_string(),
    "REGEXP_LIKE".to_string(),
    "IDENTITY".to_string(),
    "SQL_BIGINT".to_string(),
    "TO".to_string(),
    "NEW".to_string(),
    "RESULT".to_string(),
    "RIGHT".to_string(),
    "CROSS".to_string(),
    "OPTION".to_string(),
    "SCHEMA".to_string(),
    "DEFAULT".to_string(),
    "VALUES".to_string(),
    "FOUND".to_string(),
    "SHORTINT".to_string(),
    "DESCRIPTOR".to_string(),
    "OVERLAPS".to_string(),
    "DERIVED".to_string(),
    "CUBE".to_string(),
    "USAGE".to_string(),
    "EXTRACT".to_string(),
    "INTEGRITY".to_string(),
    "RELEASE".to_string(),
    "DATALINK".to_string(),
    "DLURLPATHONLY".to_string(),
    "FROM".to_string(),
    "READ".to_string(),
    "NATURAL".to_string(),
    "ARE".to_string(),
    "ALLOCATE".to_string(),
    "OTHERS".to_string(),
    "ACTION".to_string(),
    "INSENSITIVE".to_string(),
    "FETCH".to_string(),
    "ZONE".to_string(),
    "CASE".to_string(),
    "RANDOM".to_string(),
    "REAL".to_string(),
    "EXPORT".to_string(),
    "GET".to_string(),
    "GRANTED".to_string(),
    "IF".to_string(),
    "GO".to_string(),
    "REFRESH".to_string(),
    "PARTIAL".to_string(),
    "SQL_NUMERIC".to_string(),
    "END".to_string(),
    "INSTANTIABLE".to_string(),
    "FORCE".to_string(),
    "RETURNED_OCTET_LENGTH".to_string(),
    "SEQUENCE".to_string(),
    "EXEC".to_string(),
    "ROUTINE".to_string(),
    "OBJECT".to_string(),
    "GLOBAL".to_string(),
    "CONTROL".to_string(),
    "MINUTE".to_string(),
    "DECLARE".to_string(),
    "TRIM".to_string(),
    "CASCADE".to_string(),
    "SECTION".to_string(),
    "ON".to_string(),
    "BEFORE".to_string(),
    "CLOSE".to_string(),
    "SMALLINT".to_string(),
    "FULL".to_string(),
    "BETWEEN".to_string(),
    "DYNAMIC_FUNCTION".to_string(),
    "NATIONAL".to_string(),
    "FALSE".to_string(),
    "SQL_TYPE_DATE".to_string(),
    "WHERE".to_string(),
    "NCHAR".to_string(),
    "OVERLAY".to_string(),
    "FOR".to_string(),
    "SEARCH".to_string(),
    "HAVING".to_string(),
    "NCLOB".to_string(),
    "SOME".to_string(),
    "DECIMAL".to_string(),
    "SETS".to_string(),
    "TRANSFORM".to_string(),
    "SOURCE".to_string(),
    "DEFINED".to_string(),
    "EXECUTE".to_string(),
    "MOD".to_string(),
    "BY".to_string(),
    "BLOB".to_string(),
    "REF".to_string(),
    "GENERAL".to_string(),
    "DYNAMIC".to_string(),
    "CONSTRAINT_STATE_DEFAULT".to_string(),
    "IFNULL".to_string(),
    "NLS_DATE_LANGUAGE".to_string(),
    "UNDER".to_string(),
    "EXISTS".to_string(),
    "TRUNCATE".to_string(),
    "COALESCE".to_string(),
    "SQL_CHAR".to_string(),
    "BINARY".to_string(),
    "SECURITY".to_string(),
    "SQL_TINYINT".to_string(),
    "HOLD".to_string(),
    "UPDATE".to_string(),
    "CHECK".to_string(),
    "TEXT".to_string(),
    "BLOCKED".to_string(),
    "PRIVILEGES".to_string(),
    "SENSITIVE".to_string(),
    "DESCRIBE".to_string(),
    "FORMAT".to_string(),
    "CHARACTERISTICS".to_string(),
    "LOCALTIMESTAMP".to_string(),
    "CS".to_string(),
    "DELETE".to_string(),
    "WHENEVER".to_string(),
    "NONE".to_string(),
    "BEGIN".to_string(),
    "LEVEL".to_string(),
    "COLLATION".to_string(),
    "PREPARE".to_string(),
    "INTEGER".to_string(),
    "LIKE".to_string(),
    "CHECKED".to_string(),
    "LEFT".to_string(),
    "ENABLED".to_string(),
    "CHARACTER_SET_NAME".to_string(),
    "DEFERRED".to_string(),
    "SQL_TYPE_TIMESTAMP".to_string(),
    "CURRENT_DATE".to_string(),
    "RETURN".to_string(),
    "TRIGGER".to_string(),
    "CHAR".to_string(),
    "ASC".to_string(),
    "FIRST".to_string(),
    "SCRIPT".to_string(),
    "SQLSTATE".to_string(),
    "KEY_MEMBER".to_string(),
    "FBV".to_string(),
    "BIGINT".to_string(),
    "INNER".to_string(),
    "ERRORS".to_string(),
    "PRIOR".to_string(),
    "RECURSIVE".to_string(),
    "GROUPING".to_string(),
    "SQL".to_string(),
    "LAST".to_string(),
    "UNION".to_string(),
    "SQL_DECIMAL".to_string(),
    "CURRENT_PATH".to_string(),
    "LDAP".to_string(),
    "DETERMINISTIC".to_string(),
    "NEXT".to_string(),
    "SCROLL".to_string(),
    "ORDINALITY".to_string(),
    "LOW".to_string(),
    "CASCADED".to_string(),
    "CARDINALITY".to_string(),
    "EQUALS".to_string(),
    "TRANSFORMS".to_string(),
    "GEOMETRY".to_string(),
    "ALL".to_string(),
    "PARAMETER_SPECIFIC_SCHEMA".to_string(),
    "SESSION_USER".to_string(),
    "TRUE".to_string(),
    "STRUCTURE".to_string(),
    "LISTAGG".to_string(),
    "DO".to_string(),
    "CONSTRUCTOR".to_string(),
    "CURSOR".to_string(),
    "DISCONNECT".to_string(),
    "DISABLE".to_string(),
    "CURRENT_SCHEMA".to_string(),
    "VIEW".to_string(),
    "UNLINK".to_string(),
    "SQL_TIMESTAMP".to_string(),
    "SECOND".to_string(),
    "LONGVARCHAR".to_string(),
    "TABLE".to_string(),
    "PROCEDURE".to_string(),
    "DOMAIN".to_string(),
    "WITH".to_string(),
    "WHILE".to_string(),
    "MODIFIES".to_string(),
    "WITHIN".to_string(),
    "IN".to_string(),
    "NLS_NUMERIC_CHARACTERS".to_string(),
    "RESTORE".to_string(),
    "SUBSTRING".to_string(),
    "BIT".to_string(),
    "GOTO".to_string(),
    "USER".to_string(),
    "CHARACTER_SET_CATALOG".to_string(),
    "SIMILAR".to_string(),
    "SPECIFICTYPE".to_string(),
    "NLS_FIRST_DAY_OF_WEEK".to_string(),
    "ENABLE".to_string(),
    "SEPARATOR".to_string(),
    "OPEN".to_string(),
    "AT".to_string(),
    "ALTER".to_string(),
    "REFERENCES".to_string(),
    "CONSTRAINT".to_string(),
    "IMPLEMENTATION".to_string(),
    "ASSERTION".to_string(),
    "OPTIONS".to_string(),
    "ROWTYPE".to_string(),
    "COLUMN".to_string(),
    "ABSOLUTE".to_string(),
    "NLS_TIMESTAMP_FORMAT".to_string(),
    "SYSDATE".to_string(),
    "AUTHORIZATION".to_string(),
    "MAP".to_string(),
    "DAY".to_string(),
    "METHOD".to_string(),
    "VALUE".to_string(),
    "MATCHED".to_string(),
    "NVARCHAR".to_string(),
    "INVOKER".to_string(),
    "FOLLOWING".to_string(),
    "VARRAY".to_string(),
    "INTO".to_string(),
    "INTERSECT".to_string(),
    "LOCALTIME".to_string(),
    "CURRENT_TIMESTAMP".to_string(),
    "VARCHAR".to_string(),
    "SQL_DOUBLE".to_string(),
    "QUALIFY".to_string(),
    "COMMIT".to_string(),
    "ELSE".to_string(),
    "PRESERVE".to_string(),
    "SELECT".to_string(),
    "TIMESTAMP".to_string(),
    "SELECTIVE".to_string(),
    "DISTINCT".to_string(),
    "TIMEZONE_HOUR".to_string(),
    "CAST".to_string(),
    "WORK".to_string(),
    "SELF".to_string(),
    "ORDERING".to_string(),
    "END-EXEC".to_string(),
    "FINAL".to_string(),
    "LEADING".to_string(),
    "PARTITION".to_string(),
    "CONSTRAINTS".to_string(),
    "ROLLUP".to_string(),
    "EACH".to_string(),
    "INVERSE".to_string(),
    "FREE".to_string(),
    "NUMERIC".to_string(),
    "DLURLPATH".to_string(),
    "SYSTEM_USER".to_string(),
    "BYTE".to_string(),
    "OFF".to_string(),
    "WINDOW".to_string(),
    "BOOL".to_string(),
    "YES".to_string(),
    "LATERAL".to_string(),
    "ENFORCE".to_string(),
    "HASHTYPE".to_string(),
    "NUMBER".to_string(),
    "IMPORT".to_string(),
    "PARAMETER".to_string(),
    "IMPERSONATE".to_string(),
    "REPLACE".to_string(),
    "STATE".to_string(),
    "SPACE".to_string(),
    "ANY".to_string(),
    "ESCAPE".to_string(),
    "VARCHAR2".to_string(),
    "PLACING".to_string(),
    "FLOAT".to_string(),
    "DISPATCH".to_string(),
    "LEAVE".to_string(),
    "COLLATE".to_string(),
    "NULLIF".to_string(),
    "MONTH".to_string(),
    "ASENSITIVE".to_string(),
    "TRAILING".to_string(),
    "EXCEPT".to_string(),
    "PATH".to_string(),
    "DEFAULT_LIKE_ESCAPE_CHARACTER".to_string(),
    "GRANT".to_string(),
    "ORDER".to_string(),
    "DISABLED".to_string(),
    "ADD".to_string(),
    "GROUPS".to_string(),
    "DATETIME_INTERVAL_CODE".to_string(),
    "IMMEDIATE".to_string(),
    "MODIFY".to_string(),
    "INTERVAL".to_string(),
    "SQLEXCEPTION".to_string(),
    "SUBTYPE".to_string(),
    "OUT".to_string(),
    "DEALLOCATE".to_string(),
    "DLURLCOMPLETE".to_string(),
    "START".to_string(),
    "INDEX".to_string(),
    "DATETIME_INTERVAL_PRECISION".to_string(),
    "RANGE".to_string(),
    "CORRESPONDING".to_string(),
    "ARRAY".to_string(),
    "CURRENT_ROLE".to_string(),
    "SYSTEM".to_string(),
    "DBTIMEZONE".to_string(),
    "ATTRIBUTE".to_string(),
    "LIMIT".to_string(),
    "DEREF".to_string(),
    "TEMPORARY".to_string(),
    "TIMEZONE_MINUTE".to_string(),
    "VERIFY".to_string(),
    "NO".to_string(),
    "TREAT".to_string(),
    "ONLY".to_string(),
    "UNIQUE".to_string(),
    "SCOPE_USER".to_string(),
    "DLURLSCHEME".to_string(),
    "ROW".to_string(),
    "TRANSLATION".to_string(),
    "WHEN".to_string(),
    "DYNAMIC_FUNCTION_CODE".to_string(),
    "READS".to_string(),
    "WITHOUT".to_string(),
    "FUNCTION".to_string(),
    "TINYINT".to_string(),
    "MERGE".to_string(),
    "ROLLBACK".to_string(),
    "INOUT".to_string(),
    "SPECIFIC".to_string(),
    "SQL_INTEGER".to_string(),
    "BOTH".to_string(),
    "USING".to_string(),
    "MODULE".to_string(),
    "EXTERNAL".to_string(),
    "RETURNS".to_string(),
    "NULL".to_string(),
    "BOOLEAN".to_string(),
    "LOCAL".to_string(),
    "COLLATION_NAME".to_string(),
    "GROUP_CONCAT".to_string(),
    "INDICATOR".to_string(),
    "PARAMETER_SPECIFIC_NAME".to_string(),
    "NLS_DATE_FORMAT".to_string(),
    "HIGH".to_string(),
    "LOOP".to_string(),
    "CONTAINS".to_string(),
    "CASESPECIFIC".to_string(),
    "DATA".to_string(),
    "DLVALUE".to_string(),
    "CONNECTION".to_string(),
    "CREATE".to_string(),
    "ITERATE".to_string(),
    "OF".to_string(),
    "REFERENCING".to_string(),
    "CSV".to_string(),
    "DEFINER".to_string(),
    "GROUP".to_string(),
    "OVER".to_string(),
    "STATIC".to_string(),
    "FS".to_string(),
    "CURRENT_TIME".to_string(),
    "TIME".to_string(),
    "AUTHID".to_string(),
    "NOLOGGING".to_string(),
    "SESSIONTIMEZONE".to_string(),
    "DLURLSERVER".to_string(),
    "RESTRICT".to_string(),
    "THEN".to_string(),
    "CONVERT".to_string(),
    "SESSION".to_string(),
    "SYSTIMESTAMP".to_string(),
    "IS".to_string(),
    "AND".to_string(),
    "SQL_LONGVARCHAR".to_string(),
    "CHARACTER_SET_SCHEMA".to_string(),
    "SQL_BIT".to_string(),
    "DESC".to_string(),
    "SQLWARNING".to_string(),
    "CONTINUE".to_string(),
    "PRECEDING".to_string(),
    "KEY_TYPE".to_string(),
    "SQL_DATE".to_string(),
    "EMITS".to_string(),
    "INT".to_string(),
    "ELSIF".to_string(),
    "SQL_VARCHAR".to_string(),
    "JOIN".to_string(),
    "ENDIF".to_string(),
    "PREFERRING".to_string(),
    "CONNECT_BY_ROOT".to_string(),
    "STYLE".to_string(),
    "SQL_REAL".to_string(),
    "ELSEIF".to_string(),
    "CONDITION".to_string(),
    "FORALL".to_string(),
    "LOG".to_string(),
    "NAMES".to_string(),
    "CHARACTER".to_string(),
    "GENERATED".to_string(),
    "SQL_FLOAT".to_string(),
    "CLOB".to_string(),
    "RENAME".to_string(),
    "CALLED".to_string(),
    "NVARCHAR2".to_string(),
    "COLLATION_CATALOG".to_string(),
    "INSTANCE".to_string(),
    "OUTER".to_string(),
    "CYCLE".to_string(),
    "CURRENT_SESSION".to_string(),
    "CONNECT_BY_ISLEAF".to_string(),
    "EXCEPTION".to_string(),
    "HASHTYPE_FORMAT".to_string(),
    "APPEND".to_string(),
]});
