rule: LT01

test_excess_space_without_align_alias:
  fail_str: |
        SELECT
            a    AS first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo
  fix_str: |
    SELECT
        a AS first_column,
        b AS second_column,
        (a + b) / 2 AS third_column
    FROM foo
  configs:
    # This is the default config but we're being explicit
    # here for testing.
    layout:
      type:
        alias_expression:
          spacing_before: single

test_excess_space_with_align_alias:
  # NOTE: The config here shouldn't move the table alias
  fail_str: |
        SELECT
            a    AS first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo   AS bar
  fix_str: |
    SELECT
        a           AS first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo AS bar
  configs: &align_alias
    layout:
      type:
        alias_expression:
          spacing_before: align
          align_within: select_clause
          align_scope: bracketed

test_missing_keyword_with_align_alias:
  fail_str: |
        SELECT
            a    first_column,
            b      AS second_column,
            (a + b) / 2 AS third_column
        FROM foo
  fix_str: |
    SELECT
        a           first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo
  configs: *align_alias

test_skip_alias_with_align_alias:
  fail_str: |
        SELECT
            a   ,
            b   ,
            (a   +   b) /   2
        FROM foo
  fix_str: |
    SELECT
        a,
        b,
        (a + b) / 2
    FROM foo
  configs: *align_alias

test_excess_space_with_align_alias_wider:
  # NOTE: The config here SHOULD move the table alias
  # NOTE: The combined LT01 also fixes the missing space
  # between `USING` and `(a)`.
  fail_str: |
    SELECT
        a    AS first_column,
        b      AS second_column,
        (a      +      b)      /      2 AS third_column
    FROM foo   AS first_table
    JOIN my_tbl AS second_table USING(a)
  fix_str: |
    SELECT
        a           AS first_column,
        b           AS second_column,
        (a + b) / 2 AS third_column
    FROM foo        AS first_table
    JOIN my_tbl     AS second_table USING (a)
  configs: &align_alias_wider
    layout:
      type:
        alias_expression:
          spacing_before: align
          align_within: select_statement
          align_scope: bracketed

test_align_alias_boundary:
  # The alias inside the expression shouldn't move.
  fail_str: |
    SELECT
        a    AS first_column,
        (SELECT b AS c)      AS second_column
  fix_str: |
    SELECT
        a               AS first_column,
        (SELECT b AS c) AS second_column
  configs: *align_alias

test_align_alias_inline_pass:
  # The aliases on the same line shouldn't panic.
  pass_str: SELECT a AS b, c AS d FROM tbl
  configs: *align_alias

test_align_alias_inline_fail:
  # The aliases on the same line shouldn't panic.
  fail_str: SELECT a   AS   b  ,   c   AS   d    FROM tbl
  fix_str: SELECT a AS b, c AS d FROM tbl
  configs: *align_alias

# Test the alignments also for the tsql = operator
test_excess_space_without_align_alias_tsql:
  fail_str: |
        SELECT
            first_column    = a,
            second_column      = b,
            third_column = (a + b) / 2
        FROM foo
  fix_str: |
    SELECT
        first_column = a,
        second_column = b,
        third_column = (a + b) / 2
    FROM foo
  configs:
    # This is the default config but we're being explicit
    # here for testing.
    core:
      dialect: tsql
    layout:
      type:
        alias_operator:
          spacing_before: single

test_excess_space_with_align_alias_tsql:
  # NOTE: The config here shouldn't move the table alias
  fail_str: |
        SELECT
            first_column    = a,
            second_column      = b,
            third_column = (a + b) / 2
        FROM foo   AS bar
  fix_str: |
    SELECT
        first_column  = a,
        second_column = b,
        third_column  = (a + b) / 2
    FROM foo AS bar
  configs: &tsql_align_alias
    core:
      dialect: tsql
    layout:
      type:
        alias_operator:
          spacing_before: align
          align_within: select_clause
          align_scope: bracketed

test_missing_keyword_with_align_alias_tsql:
  fail_str: |
        SELECT
            first_column    a,
            second_column      = b,
            third_column = (a + b) / 2
        FROM foo
  fix_str: |
    SELECT
        first_column a,
        second_column = b,
        third_column  = (a + b) / 2
    FROM foo
  configs: *tsql_align_alias

test_excess_space_with_align_alias_wider_tsql:
    # NOTE: The config here SHOULD move the table alias
  # NOTE: The combined LT01 also fixes the missing space
  # between `USING` and `(a)`.
  fail_str: |
    SELECT
        first_column    = a,
        second_column      = b,
        third_column = (a      +      b)      /      2
    FROM foo   AS first_table
    JOIN my_tbl AS second_table USING(a)
  fix_str: |
    SELECT
        first_column  = a,
        second_column = b,
        third_column  = (a + b) / 2
    FROM foo          AS first_table
    JOIN my_tbl       AS second_table USING (a)
  configs: &tsql_align_alias_wider
    core:
      dialect: tsql
    layout:
      type:
        alias_operator:
          spacing_before: align
          align_within: select_statement
          align_scope: bracketed

test_align_alias_boundary_tsql:
  # The alias inside the expression shouldn't move.
  fail_str: |
    SELECT
        first_column    = a,
        second_column      = (SELECT b AS c)
  fix_str: |
    SELECT
        first_column  = a,
        second_column = (SELECT b AS c)
  configs: *tsql_align_alias

test_align_alias_inline_pass_tsql:
  # The aliases on the same line shouldn't panic.
  pass_str: SELECT a = b, c = d FROM tbl
  configs: *tsql_align_alias

test_align_alias_inline_fail_tsql:
  # The aliases on the same line shouldn't panic.
  fail_str: SELECT a   =   b  ,   c   =   d    FROM tbl
  fix_str: SELECT a = b, c = d FROM tbl
  configs: *tsql_align_alias

test_excess_space_with_align_alias_tsql_mixed:
  # NOTE: The config here shouldn't move the table alias
  fail_str: |
        SELECT
            a    AS first_column,
            second_column    = b,
            third_column_long_name    = (a + b) / 2
        FROM foo
  fix_str: |
    SELECT
        a                      AS first_column,
        second_column          = b,
        third_column_long_name = (a + b) / 2
    FROM foo
  configs: *tsql_align_alias

test_align_multiple_a:
  # https://github.com/sqlfluff/sqlfluff/issues/4023
  fail_str: |
    CREATE TABLE tbl (
        foo VARCHAR(25) NOT NULL,
        barbar INT NULL
    )
  fix_str: |
    CREATE TABLE tbl (
        foo    VARCHAR(25) NOT NULL,
        barbar INT         NULL
    )
  configs:
    layout:
      type:
        data_type:
          spacing_before: align
          align_within: create_table_statement
        column_constraint_segment:
          spacing_before: align
          align_within: create_table_statement

test_align_multiple_b:
  # If there are multiple options on the same line, choose the first
  # to align with (i.e. `not null` rather than `unique`).
  # https://github.com/sqlfluff/sqlfluff/issues/4023
  # https://github.com/sqlfluff/sqlfluff/pull/5238
  fail_str: |
    create table tab (
        foo    varchar(25)  not null,
        barbar int not null unique
    )
  fix_str: |
    create table tab (
        foo    varchar(25) not null,
        barbar int         not null unique
    )
  configs:
    layout:
      type:
        data_type:
          spacing_before: align
          align_within: create_table_statement
        column_constraint_segment:
          spacing_before: align
          align_within: create_table_statement

test_align_multiple_multiple_lines_a:
  # If there are multiple options on several lines, always choose the first
  # to align with, related to https://github.com/sqlfluff/sqlfluff/pull/5823
  fail_str: |
    create table tab (
        foo    varchar(25)  not null,
        barbar int not null unique,
        barbara varchar(5) not null primary key
    )
  fix_str: |
    create table tab (
        foo     varchar(25) not null,
        barbar  int         not null unique,
        barbara varchar(5)  not null primary key
    )
  configs:
    layout:
      type:
        data_type:
          spacing_before: align
          align_within: create_table_statement
        column_constraint_segment:
          spacing_before: align
          align_within: create_table_statement

test_align_multiple_multiple_lines_b:
  # If there are multiple options only on one of several lines, still align
  # correctly, related to https://github.com/sqlfluff/sqlfluff/pull/5823
  pass_str: |
    CREATE TABLE foo (
        x INT NOT NULL PRIMARY KEY,
        y INT NULL,
        z INT NULL
    );
  configs:
    layout:
      type:
        data_type:
          spacing_before: align
          align_within: create_table_statement
        column_constraint_segment:
          spacing_before: align
          align_within: create_table_statement

test_align_multiple_all:
  fail_str: |
    create table tab1 (
        a    varchar(25)  not null,
        b int not null unique references tab2(b),
        c varchar(5) not null primary key references tab2(c)
    )
  fix_str: |
    create table tab1 (
        a varchar(25) not null,
        b int         not null unique      references tab2 (b),
        c varchar(5)  not null primary key references tab2 (c)
    )
  configs:
    layout:
      type:
        data_type:
          spacing_before: align
          align_within: create_table_statement
        column_constraint_segment:
          spacing_before: align
          align_within: create_table_statement

test_align_multiple_operators:
  # Unrealistic but more stretching with several lines which
  # have different numbers of the same target.
  fail_str: |
    select
        1+123+12345 as foo,
        123456+1+12+56 as bar,
        1234+123456789 as baz
    from t
  fix_str: |
    select
        1      + 123 + 12345 as foo,
        123456 + 1   + 12 + 56 as bar,
        1234   + 123456789 as baz
    from t
  configs:
    layout:
      type:
        binary_operator:
          spacing_before: align
          align_within: select_statement
