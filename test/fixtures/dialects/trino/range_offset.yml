# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: c5b8500569b2fa1dfadd99b24d92f8b3d8e5712adf74dd649ed13ae89e19742e
file:
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            naked_identifier: student_id
      - comma: ','
      - select_clause_element:
          column_reference:
            naked_identifier: result
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: count
            function_contents:
              bracketed:
                start_bracket: (
                star: '*'
                end_bracket: )
            over_clause:
              keyword: OVER
              bracketed:
                start_bracket: (
                window_specification:
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      naked_identifier: result
                  frame_clause:
                  - keyword: RANGE
                  - keyword: BETWEEN
                  - numeric_literal: '1'
                  - keyword: FOLLOWING
                  - keyword: AND
                  - numeric_literal: '2'
                  - keyword: FOLLOWING
                end_bracket: )
          alias_expression:
            keyword: AS
            naked_identifier: close_better_scores_count
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: students_results
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: avg
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: totalprice
                end_bracket: )
            over_clause:
              keyword: OVER
              bracketed:
                start_bracket: (
                window_specification:
                  partitionby_clause:
                  - keyword: PARTITION
                  - keyword: BY
                  - expression:
                      column_reference:
                        naked_identifier: custkey
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      naked_identifier: orderdate
                  frame_clause:
                  - keyword: RANGE
                  - keyword: BETWEEN
                  - interval_expression:
                    - keyword: interval
                    - quoted_literal: "'1'"
                    - keyword: DAY
                  - keyword: PRECEDING
                  - keyword: AND
                  - interval_expression:
                    - keyword: interval
                    - quoted_literal: "'1'"
                    - keyword: DAY
                  - keyword: FOLLOWING
                end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: orders
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: avg
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: totalprice
                end_bracket: )
            over_clause:
              keyword: OVER
              naked_identifier: w
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: sum
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: totalprice
                end_bracket: )
            over_clause:
              keyword: OVER
              naked_identifier: w
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: max
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: totalprice
                end_bracket: )
            over_clause:
              keyword: OVER
              naked_identifier: w
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: orders
      named_window:
        keyword: WINDOW
        named_window_expression:
          naked_identifier: w
          keyword: AS
          bracketed:
            start_bracket: (
            window_specification:
              partitionby_clause:
              - keyword: PARTITION
              - keyword: BY
              - expression:
                  column_reference:
                    naked_identifier: custkey
              orderby_clause:
              - keyword: ORDER
              - keyword: BY
              - column_reference:
                  naked_identifier: orderdate
              frame_clause:
              - keyword: RANGE
              - keyword: BETWEEN
              - interval_expression:
                - keyword: interval
                - quoted_literal: "'1'"
                - keyword: month
              - keyword: PRECEDING
              - keyword: AND
              - keyword: CURRENT
              - keyword: ROW
            end_bracket: )
