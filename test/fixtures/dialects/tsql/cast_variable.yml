# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 8578a560678d2553af3a7e017ff480f13c135db56ab048efc87221c764fe7d3b
file:
  batch:
  - statement:
      declare_segment:
        keyword: DECLARE
        parameter: '@DateNow'
        data_type:
          data_type_identifier: date
        comparison_operator:
          raw_comparison_operator: '='
        expression:
          function:
            function_name:
              function_name_identifier: ISNULL
            function_contents:
              bracketed:
              - start_bracket: (
              - expression:
                  function:
                    function_name:
                      naked_identifier: Shared
                      dot: .
                      function_name_identifier: GetESTDateTime
                    function_contents:
                      bracketed:
                        start_bracket: (
                        expression:
                          function:
                            function_name:
                              function_name_identifier: GETDATE
                            function_contents:
                              bracketed:
                                start_bracket: (
                                end_bracket: )
                        end_bracket: )
              - comma: ','
              - expression:
                  function:
                    function_name:
                      function_name_identifier: GETDATE
                    function_contents:
                      bracketed:
                        start_bracket: (
                        end_bracket: )
              - end_bracket: )
  - statement:
      select_statement:
        select_clause:
        - keyword: select
        - select_clause_element:
            column_reference:
            - naked_identifier: enc
            - dot: .
            - naked_identifier: personid
            alias_expression:
              keyword: as
              naked_identifier: personid
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                keyword: cast
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'1900-01-01'"
                  keyword: as
                  data_type:
                    data_type_identifier: datetime2
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '7'
                        end_bracket: )
                  end_bracket: )
            alias_expression:
              keyword: as
              naked_identifier: DataRefreshDate
        from_clause:
          keyword: from
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: encounter
              alias_expression:
                naked_identifier: enc
          statement_terminator: ;
  - statement:
      declare_segment:
        keyword: declare
        parameter: '@sample'
        data_type:
          data_type_identifier: nvarchar
          bracketed_arguments:
            bracketed:
              start_bracket: (
              keyword: max
              end_bracket: )
        comparison_operator:
          raw_comparison_operator: '='
        expression:
          function:
            function_name:
              keyword: cast
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  numeric_literal: '100'
                keyword: as
                data_type:
                  data_type_identifier: nvarchar
                  bracketed_arguments:
                    bracketed:
                      start_bracket: (
                      keyword: max
                      end_bracket: )
                end_bracket: )
