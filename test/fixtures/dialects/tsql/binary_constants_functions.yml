# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 957e4dd80af29d29016e24e2462732d294f07c16eb44b1e47286f593166a6ac4
file:
  batch:
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: '0x0'
                  keyword: as
                  data_type:
                    keyword: uniqueidentifier
                  end_bracket: )
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: '0xAE'
                  keyword: as
                  data_type:
                    keyword: binary
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        expression:
                          integer_literal: '2'
                        end_bracket: )
                  end_bracket: )
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: '0x12Ef'
                  keyword: as
                  data_type:
                    keyword: varbinary
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        expression:
                          integer_literal: '16'
                        end_bracket: )
                  end_bracket: )
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: 0X0
                  keyword: as
                  data_type:
                    keyword: uniqueidentifier
                  end_bracket: )
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CONVERT
              function_contents:
                bracketed:
                  start_bracket: (
                  data_type:
                    keyword: binary
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        expression:
                          integer_literal: '4'
                        end_bracket: )
                  comma: ','
                  expression:
                    binary_literal: '0x69048AEF'
                  end_bracket: )
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: select
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: 0x
                  keyword: as
                  data_type:
                    keyword: binary
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        expression:
                          integer_literal: '1'
                        end_bracket: )
                  end_bracket: )
        statement_terminator: ;
