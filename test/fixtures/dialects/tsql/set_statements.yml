# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: c543f490a50ebe1e67dc4e64012f915be911fdf643e2d25c289f04dbf6a98860
file:
  batch:
  - statement:
      set_segment:
      - keyword: SET
      - keyword: TRANSACTION
      - keyword: ISOLATION
      - keyword: LEVEL
      - keyword: READ
      - keyword: UNCOMMITTED
      - statement_terminator: ;
  - statement:
      set_segment:
        keyword: SET
        parameter: '@param1'
        assignment_operator:
          raw_comparison_operator: '='
        expression:
          integer_literal: '1'
        statement_terminator: ;
  - statement:
      set_segment:
      - keyword: SET
      - parameter: '@param1'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          integer_literal: '1'
      - comma: ','
      - parameter: '@param2'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          integer_literal: '2'
      - statement_terminator: ;
  - statement:
      set_segment:
      - keyword: SET
      - parameter: '@param1'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          column_reference:
            quoted_identifier: '"test, test"'
      - comma: ','
      - parameter: '@param2'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          integer_literal: '2'
      - statement_terminator: ;
  - statement:
      set_segment:
      - keyword: SET
      - parameter: '@param1'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          bracketed:
          - start_bracket: (
          - column_reference:
              quoted_identifier: '"test"'
          - comma: ','
          - column_reference:
              quoted_identifier: '"test"'
          - end_bracket: )
      - comma: ','
      - parameter: '@param2'
      - assignment_operator:
          raw_comparison_operator: '='
      - expression:
          integer_literal: '2'
      - statement_terminator: ;
  - statement:
      set_segment:
      - keyword: SET
      - parameter: '@param1'
      - assignment_operator:
          binary_operator: +
          raw_comparison_operator: '='
      - expression:
          integer_literal: '1'
      - comma: ','
      - parameter: '@param2'
      - assignment_operator:
          binary_operator: '-'
          raw_comparison_operator: '='
      - expression:
          integer_literal: '2'
      - comma: ','
      - parameter: '@param3'
      - assignment_operator:
          binary_operator: '*'
          raw_comparison_operator: '='
      - expression:
          integer_literal: '3'
      - comma: ','
      - parameter: '@param4'
      - assignment_operator:
          binary_operator: /
          raw_comparison_operator: '='
      - expression:
          integer_literal: '4'
      - comma: ','
      - parameter: '@param5'
      - assignment_operator:
          binary_operator: '%'
          raw_comparison_operator: '='
      - expression:
          integer_literal: '5'
      - comma: ','
      - parameter: '@param5'
      - assignment_operator:
          binary_operator: ^
          raw_comparison_operator: '='
      - expression:
          integer_literal: '6'
      - comma: ','
      - parameter: '@param5'
      - assignment_operator:
          binary_operator:
            ampersand: '&'
          raw_comparison_operator: '='
      - expression:
          integer_literal: '7'
      - comma: ','
      - parameter: '@param5'
      - assignment_operator:
          binary_operator:
            pipe: '|'
          raw_comparison_operator: '='
      - expression:
          integer_literal: '8'
      - statement_terminator: ;
  - statement:
      set_segment:
        keyword: SET
        parameter: '@param1'
        assignment_operator:
          raw_comparison_operator: '='
        expression:
          bracketed:
            start_bracket: (
            expression:
              sequence_next_value:
              - keyword: NEXT
              - keyword: VALUE
              - keyword: FOR
              - object_reference:
                - quoted_identifier: '[dbo]'
                - dot: .
                - quoted_identifier: '[SEQUENCE_NAME]'
            end_bracket: )
        statement_terminator: ;
  - statement:
      declare_segment:
        keyword: DECLARE
        parameter: '@BinaryVariable2'
        data_type:
          data_type_identifier: BINARY
          bracketed_arguments:
            bracketed:
              start_bracket: (
              expression:
                integer_literal: '2'
              end_bracket: )
        comparison_operator:
          raw_comparison_operator: '='
        expression:
          binary_literal: '0xFA'
        statement_terminator: ;
