# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: a11d4ea601181da712cb9b2bd24ec685cc5a737ca561ec82262371b0fcc17fc6
file:
  batch:
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            binary_literal: '0x0'
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            binary_literal: 0x
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            binary_literal: '0xAE'
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            binary_literal: '0x12Ef'
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            binary_literal: '0x69048AEFDD010E'
        statement_terminator: ;
  - statement:
      declare_segment:
        keyword: DECLARE
        parameter: '@bin'
        data_type:
          data_type_identifier: varbinary
          bracketed_arguments:
            bracketed:
              start_bracket: (
              expression:
                numeric_literal: '1'
              end_bracket: )
        comparison_operator:
          raw_comparison_operator: '='
        expression:
          binary_literal: '0x0'
        statement_terminator: ;
  - statement:
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            function:
              function_name:
                keyword: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    binary_literal: '0x0'
                  keyword: as
                  data_type:
                    data_type_identifier: uniqueidentifier
                  end_bracket: )
        statement_terminator: ;
