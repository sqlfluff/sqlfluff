# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: aa35dd0e9cb1196f731f80fd23ebc17531cc124d892a3c03ba0a7147c3d4cd35
file:
  batch:
  - statement:
      if_then_statement:
      - if_clause:
          keyword: IF
          expression:
            numeric_literal: '1'
            comparison_operator:
            - raw_comparison_operator: <
            - raw_comparison_operator: '='
            bracketed:
              start_bracket: (
              expression:
                select_statement:
                  select_clause:
                    keyword: SELECT
                    select_clause_element:
                      column_reference:
                        naked_identifier: Weight
                  from_clause:
                    keyword: from
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            naked_identifier: DimProduct
                  where_clause:
                    keyword: WHERE
                    expression:
                      column_reference:
                        naked_identifier: ProductKey
                      comparison_operator:
                        raw_comparison_operator: '='
                      numeric_literal: '1'
              end_bracket: )
      - statement:
          select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  naked_identifier: ProductKey
            - comma: ','
            - select_clause_element:
                column_reference:
                  naked_identifier: EnglishDescription
            - comma: ','
            - select_clause_element:
                column_reference:
                  naked_identifier: Weight
            - comma: ','
            - select_clause_element:
                quoted_literal: "'This product is too heavy to ship and is only available\
                  \ for pickup.'"
                alias_expression:
                  keyword: AS
                  naked_identifier: ShippingStatus
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: DimProduct
            where_clause:
              keyword: WHERE
              expression:
                column_reference:
                  naked_identifier: ProductKey
                comparison_operator:
                  raw_comparison_operator: '='
                numeric_literal: '1'
      - keyword: ELSE
      - statement:
          select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  naked_identifier: ProductKey
            - comma: ','
            - select_clause_element:
                column_reference:
                  naked_identifier: EnglishDescription
            - comma: ','
            - select_clause_element:
                column_reference:
                  naked_identifier: Weight
            - comma: ','
            - select_clause_element:
                quoted_literal: "'This product is available for shipping or pickup.'"
                alias_expression:
                  keyword: AS
                  naked_identifier: ShippingStatus
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: DimProduct
            where_clause:
              keyword: WHERE
              expression:
                column_reference:
                  naked_identifier: ProductKey
                comparison_operator:
                  raw_comparison_operator: '='
                numeric_literal: '1'
  - statement:
      if_then_statement:
        if_clause:
          keyword: if
          expression:
            keyword: exists
            bracketed:
              start_bracket: (
              set_expression:
              - select_statement:
                  select_clause:
                    keyword: select
                    select_clause_element:
                      wildcard_expression:
                        wildcard_identifier:
                          star: '*'
                  from_clause:
                    keyword: from
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            hash_identifier: '#a'
              - set_operator:
                - keyword: union
                - keyword: all
              - select_statement:
                  select_clause:
                    keyword: select
                    select_clause_element:
                      wildcard_expression:
                        wildcard_identifier:
                          star: '*'
                  from_clause:
                    keyword: from
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            hash_identifier: '#b'
              end_bracket: )
        statement:
          set_segment:
            keyword: set
            parameter: '@var'
            assignment_operator:
              raw_comparison_operator: '='
            expression:
              numeric_literal: '1'
            statement_terminator: ;
