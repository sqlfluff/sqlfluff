# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: d3b0ec3d8c84a39c2771499a6b77a972f064f9e171c3b882ebe8126707853168
file:
  batch:
  - statement:
      declare_segment:
      - keyword: DECLARE
      - parameter: '@MyTableVar'
      - keyword: TABLE
      - bracketed:
        - start_bracket: (
        - column_definition:
            naked_identifier: EmpID
            data_type:
              data_type_identifier: INT
            column_constraint_segment:
            - keyword: NOT
            - keyword: 'NULL'
        - comma: ','
        - column_definition:
            naked_identifier: OldVacationHours
            data_type:
              data_type_identifier: INT
        - comma: ','
        - column_definition:
            naked_identifier: NewVacationHours
            data_type:
              data_type_identifier: INT
        - comma: ','
        - column_definition:
            naked_identifier: ModifiedDate
            data_type:
              data_type_identifier: DATETIME
        - comma: ','
        - table_constraint:
          - keyword: PRIMARY
          - keyword: KEY
          - bracketed_index_column_list_grammar:
              bracketed:
                start_bracket: (
                index_column_definition:
                  naked_identifier: EmpID
                end_bracket: )
        - end_bracket: )
      - statement_terminator: ;
  - statement:
      declare_segment:
      - keyword: DECLARE
      - parameter: '@myTable'
      - keyword: TABLE
      - bracketed:
        - start_bracket: (
        - column_definition:
            naked_identifier: ID
            data_type:
              data_type_identifier: INT
        - comma: ','
        - column_definition:
            naked_identifier: MyCol1
            data_type:
              data_type_identifier: BIT
        - comma: ','
        - column_definition:
            naked_identifier: MyCol2
            data_type:
              data_type_identifier: BIT
        - comma: ','
        - computed_column_definition:
            naked_identifier: MyComputedCol
            keyword: AS
            bracketed:
              start_bracket: (
              expression:
                case_expression:
                - keyword: CASE
                - when_clause:
                  - keyword: WHEN
                  - expression:
                    - column_reference:
                        naked_identifier: MyCol1
                    - binary_operator:
                        ampersand: '&'
                    - column_reference:
                        naked_identifier: MyCol2
                    - comparison_operator:
                        raw_comparison_operator: '='
                    - integer_literal: '0'
                  - keyword: THEN
                  - expression:
                      integer_literal: '1'
                - when_clause:
                  - keyword: WHEN
                  - expression:
                      column_reference:
                        naked_identifier: MyCol2
                      comparison_operator:
                        raw_comparison_operator: '='
                      integer_literal: '0'
                  - keyword: THEN
                  - expression:
                      integer_literal: '2'
                - else_clause:
                    keyword: ELSE
                    expression:
                      integer_literal: '3'
                - keyword: END
              end_bracket: )
        - end_bracket: )
      - statement_terminator: ;
