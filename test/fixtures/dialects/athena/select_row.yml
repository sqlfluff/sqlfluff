# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 5124db6d90939061d3aa644589b184c37d68688953d4c808f2eb9378e19784a9
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: ROW
            function_contents:
              bracketed:
              - start_bracket: (
              - expression:
                  numeric_literal: '1'
              - comma: ','
              - expression:
                  numeric_literal: '2.0'
              - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: CAST
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  function:
                    function_name:
                      function_name_identifier: ROW
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          numeric_literal: '1'
                      - comma: ','
                      - expression:
                          numeric_literal: '2.0'
                      - end_bracket: )
                keyword: AS
                data_type:
                  keyword: ROW
                  bracketed:
                  - start_bracket: (
                  - naked_identifier: x
                  - data_type:
                      primitive_type:
                        keyword: BIGINT
                  - comma: ','
                  - naked_identifier: y
                  - data_type:
                      primitive_type:
                        keyword: DOUBLE
                  - end_bracket: )
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            typed_array_literal:
              array_type:
                keyword: ARRAY
              array_literal:
                start_square_bracket: '['
                function:
                  function_name:
                    function_name_identifier: CAST
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        function:
                          function_name:
                            function_name_identifier: ROW
                          function_contents:
                            bracketed:
                              start_bracket: (
                              expression:
                                numeric_literal: '1'
                              end_bracket: )
                      keyword: AS
                      data_type:
                        keyword: ROW
                        bracketed:
                          start_bracket: (
                          naked_identifier: x
                          data_type:
                            primitive_type:
                              keyword: INT
                          end_bracket: )
                      end_bracket: )
                end_square_bracket: ']'
            array_accessor:
              start_square_bracket: '['
              numeric_literal: '1'
              end_square_bracket: ']'
            dot: .
            object_reference:
              naked_identifier: x
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: CAST
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  function:
                    function_name:
                      function_name_identifier: ROW
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          typed_array_literal:
                            array_type:
                              keyword: ARRAY
                            array_literal:
                              start_square_bracket: '['
                              function:
                                function_name:
                                  function_name_identifier: CAST
                                function_contents:
                                  bracketed:
                                    start_bracket: (
                                    expression:
                                      function:
                                        function_name:
                                          function_name_identifier: ROW
                                        function_contents:
                                          bracketed:
                                            start_bracket: (
                                            expression:
                                              quoted_literal: "''"
                                            end_bracket: )
                                    keyword: AS
                                    data_type:
                                      keyword: ROW
                                      bracketed:
                                        start_bracket: (
                                        naked_identifier: id
                                        data_type:
                                          primitive_type:
                                            keyword: varchar
                                        end_bracket: )
                                    end_bracket: )
                              end_square_bracket: ']'
                      - comma: ','
                      - expression:
                          function:
                            function_name:
                              function_name_identifier: CAST
                            function_contents:
                              bracketed:
                                start_bracket: (
                                expression:
                                  function:
                                    function_name:
                                      function_name_identifier: ROW
                                    function_contents:
                                      bracketed:
                                        start_bracket: (
                                        expression:
                                          quoted_literal: "''"
                                        end_bracket: )
                                keyword: AS
                                data_type:
                                  keyword: ROW
                                  bracketed:
                                    start_bracket: (
                                    naked_identifier: id
                                    data_type:
                                      primitive_type:
                                        keyword: varchar
                                    end_bracket: )
                                end_bracket: )
                      - comma: ','
                      - expression:
                          quoted_literal: "'Approved'"
                      - end_bracket: )
                keyword: AS
                data_type:
                  keyword: ROW
                  bracketed:
                  - start_bracket: (
                  - naked_identifier: approvers
                  - data_type:
                      array_type:
                        keyword: ARRAY
                        array_type_schema:
                          start_angle_bracket: <
                          data_type:
                            keyword: ROW
                            bracketed:
                              start_bracket: (
                              naked_identifier: id
                              data_type:
                                primitive_type:
                                  keyword: varchar
                              end_bracket: )
                          end_angle_bracket: '>'
                  - comma: ','
                  - naked_identifier: performer
                  - data_type:
                      keyword: ROW
                      bracketed:
                        start_bracket: (
                        naked_identifier: id
                        data_type:
                          primitive_type:
                            keyword: varchar
                        end_bracket: )
                  - comma: ','
                  - naked_identifier: approvalStatus
                  - data_type:
                      primitive_type:
                        keyword: varchar
                  - end_bracket: )
                end_bracket: )
          alias_expression:
            keyword: as
            naked_identifier: test
- statement_terminator: ;
