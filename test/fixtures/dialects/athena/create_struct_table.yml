# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 0d582e98441f7d59557a013f0ba031af9560bf47be07face2254c4c83b747830
file:
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: struct_table
    - bracketed:
        start_bracket: (
        column_definition:
          naked_identifier: c1
          data_type:
            struct_type:
              keyword: struct
              struct_type_schema:
              - start_angle_bracket: <
              - naked_identifier: name
              - colon: ':'
              - data_type:
                  primitive_type:
                    keyword: varchar
                    bracketed_arguments:
                      bracketed:
                        start_bracket: (
                        numeric_literal: '10'
                        end_bracket: )
              - comma: ','
              - naked_identifier: age
              - colon: ':'
              - data_type:
                  primitive_type:
                    keyword: integer
              - end_angle_bracket: '>'
        end_bracket: )
    - keyword: LOCATION
    - quoted_literal: "'...'"
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        naked_identifier: struct_table
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            function:
              function_name:
                function_name_identifier: CAST
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    function:
                      function_name:
                        function_name_identifier: ROW
                      function_contents:
                        bracketed:
                        - start_bracket: (
                        - expression:
                            quoted_literal: "'Bob'"
                        - comma: ','
                        - expression:
                            numeric_literal: '38'
                        - end_bracket: )
                  keyword: AS
                  data_type:
                    keyword: ROW
                    bracketed:
                    - start_bracket: (
                    - naked_identifier: name
                    - data_type:
                        primitive_type:
                          keyword: VARCHAR
                          bracketed_arguments:
                            bracketed:
                              start_bracket: (
                              numeric_literal: '10'
                              end_bracket: )
                    - comma: ','
                    - naked_identifier: age
                    - data_type:
                        primitive_type:
                          keyword: INTEGER
                    - end_bracket: )
                  end_bracket: )
- statement_terminator: ;
