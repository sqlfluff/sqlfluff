# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 2b542b9c315c416aad52beb12d7bff7ce7e4a65dea1c8fa65266477ccc1f05da
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            column_reference:
              naked_identifier: c1
            semi_structured_expression:
              colon: ':'
              semi_structured_element: price
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              values_clause:
                keyword: VALUES
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'{ \"price\": 5 }'"
                  end_bracket: )
                alias_expression:
                  keyword: AS
                  naked_identifier: T
                  bracketed:
                    start_bracket: (
                    identifier_list:
                      naked_identifier: c1
                    end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              column_reference:
                naked_identifier: c1
              semi_structured_expression:
                colon: ':'
                start_square_bracket: '['
                semi_structured_element: "'price'"
                end_square_bracket: ']'
              casting_operator: '::'
              data_type:
                primitive_type:
                  keyword: DECIMAL
                  bracketed_arguments:
                    bracketed:
                    - start_bracket: (
                    - numeric_literal: '5'
                    - comma: ','
                    - numeric_literal: '2'
                    - end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              values_clause:
                keyword: VALUES
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'{ \"price\": 5 }'"
                  end_bracket: )
                alias_expression:
                  keyword: AS
                  naked_identifier: T
                  bracketed:
                    start_bracket: (
                    identifier_list:
                      naked_identifier: c1
                    end_bracket: )
- statement_terminator: ;
