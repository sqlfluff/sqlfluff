# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 8b0e93c42ff8c710a0571309990d7dee28469043361107cad9fe3ca34f5e4ddf
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: reduce
            function_contents:
              bracketed:
              - start_bracket: (
              - expression:
                  function:
                    function_name:
                      function_name_identifier: array
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          numeric_literal: '1'
                      - comma: ','
                      - expression:
                          numeric_literal: '2'
                      - comma: ','
                      - expression:
                          numeric_literal: '3'
                      - end_bracket: )
              - comma: ','
              - expression:
                  numeric_literal: '0'
              - comma: ','
              - expression:
                - bracketed:
                  - start_bracket: (
                  - column_reference:
                      naked_identifier: acc
                  - comma: ','
                  - column_reference:
                      naked_identifier: x
                  - end_bracket: )
                - binary_operator: ->
                - column_reference:
                    naked_identifier: acc
                - binary_operator: +
                - column_reference:
                    naked_identifier: x
              - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: reduce
            function_contents:
              bracketed:
              - start_bracket: (
              - expression:
                  function:
                    function_name:
                      function_name_identifier: array
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          numeric_literal: '1'
                      - comma: ','
                      - expression:
                          numeric_literal: '2'
                      - comma: ','
                      - expression:
                          numeric_literal: '3'
                      - end_bracket: )
              - comma: ','
              - expression:
                  numeric_literal: '0'
              - comma: ','
              - expression:
                - bracketed:
                  - start_bracket: (
                  - column_reference:
                      naked_identifier: acc
                  - comma: ','
                  - column_reference:
                      naked_identifier: x
                  - end_bracket: )
                - binary_operator: ->
                - column_reference:
                    naked_identifier: acc
                - binary_operator: +
                - column_reference:
                    naked_identifier: x
              - comma: ','
              - expression:
                - column_reference:
                    naked_identifier: acc
                - binary_operator: ->
                - column_reference:
                    naked_identifier: acc
                - binary_operator: '*'
                - numeric_literal: '10'
              - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: reduce
            function_contents:
              bracketed:
              - start_bracket: (
              - expression:
                  function:
                    function_name:
                      function_name_identifier: array
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          numeric_literal: '1'
                      - comma: ','
                      - expression:
                          numeric_literal: '2'
                      - comma: ','
                      - expression:
                          numeric_literal: '3'
                      - comma: ','
                      - expression:
                          numeric_literal: '4'
                      - end_bracket: )
              - comma: ','
              - expression:
                  function:
                    function_name:
                      function_name_identifier: named_struct
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          quoted_literal: "'sum'"
                      - comma: ','
                      - expression:
                          numeric_literal: '0'
                      - comma: ','
                      - expression:
                          quoted_literal: "'cnt'"
                      - comma: ','
                      - expression:
                          numeric_literal: '0'
                      - end_bracket: )
              - comma: ','
              - expression:
                  bracketed:
                  - start_bracket: (
                  - column_reference:
                      naked_identifier: acc
                  - comma: ','
                  - column_reference:
                      naked_identifier: x
                  - end_bracket: )
                  binary_operator: ->
                  function:
                    function_name:
                      function_name_identifier: named_struct
                    function_contents:
                      bracketed:
                      - start_bracket: (
                      - expression:
                          quoted_literal: "'sum'"
                      - comma: ','
                      - expression:
                        - column_reference:
                          - naked_identifier: acc
                          - dot: .
                          - naked_identifier: sum
                        - binary_operator: +
                        - column_reference:
                            naked_identifier: x
                      - comma: ','
                      - expression:
                          quoted_literal: "'cnt'"
                      - comma: ','
                      - expression:
                          column_reference:
                          - naked_identifier: acc
                          - dot: .
                          - naked_identifier: cnt
                          binary_operator: +
                          numeric_literal: '1'
                      - end_bracket: )
              - comma: ','
              - expression:
                - column_reference:
                    naked_identifier: acc
                - binary_operator: ->
                - column_reference:
                  - naked_identifier: acc
                  - dot: .
                  - naked_identifier: sum
                - binary_operator: /
                - column_reference:
                  - naked_identifier: acc
                  - dot: .
                  - naked_identifier: cnt
              - end_bracket: )
          alias_expression:
            keyword: AS
            naked_identifier: avg
- statement_terminator: ;
