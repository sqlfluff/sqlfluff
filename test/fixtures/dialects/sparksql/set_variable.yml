# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 71c02a8f9b68d177148d660c2d288429ae80793a049057e9a4d06d2710ab68a2
file:
- statement:
    set_variable_statement:
    - keyword: SET
    - keyword: VAR
    - naked_identifier: var1
    - comparison_operator:
        raw_comparison_operator: '='
    - expression:
        numeric_literal: '5'
- statement_terminator: ;
- statement:
    set_variable_statement:
    - keyword: SET
    - keyword: VARIABLE
    - naked_identifier: var1
    - comparison_operator:
        raw_comparison_operator: '='
    - expression:
        bracketed:
          start_bracket: (
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                function:
                  function_name:
                    function_name_identifier: max
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          naked_identifier: c1
                      end_bracket: )
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    values_clause:
                    - keyword: VALUES
                    - bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '1'
                        end_bracket: )
                    - comma: ','
                    - bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '2'
                        end_bracket: )
                    - alias_expression:
                        alias_operator:
                          keyword: AS
                        naked_identifier: t
                        bracketed:
                          start_bracket: (
                          identifier_list:
                            naked_identifier: c1
                          end_bracket: )
          end_bracket: )
- statement_terminator: ;
- statement:
    set_variable_statement:
    - keyword: SET
    - keyword: VAR
    - naked_identifier: var1
    - comparison_operator:
        raw_comparison_operator: '='
    - keyword: DEFAULT
- statement_terminator: ;
- statement:
    set_variable_statement:
    - keyword: SET
    - keyword: VAR
    - bracketed:
      - start_bracket: (
      - naked_identifier: var1
      - comma: ','
      - naked_identifier: var2
      - end_bracket: )
    - comparison_operator:
        raw_comparison_operator: '='
    - expression:
        bracketed:
          start_bracket: (
          select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                function:
                  function_name:
                    function_name_identifier: max
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          naked_identifier: c1
                      end_bracket: )
            - comma: ','
            - select_clause_element:
                function:
                  function_name:
                    function_name_identifier: CAST
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        function:
                          function_name:
                            function_name_identifier: min
                          function_contents:
                            bracketed:
                              start_bracket: (
                              expression:
                                column_reference:
                                  naked_identifier: c1
                              end_bracket: )
                      keyword: AS
                      data_type:
                        primitive_type:
                          keyword: STRING
                      end_bracket: )
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    values_clause:
                    - keyword: VALUES
                    - bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '1'
                        end_bracket: )
                    - comma: ','
                    - bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '2'
                        end_bracket: )
                    - alias_expression:
                        alias_operator:
                          keyword: AS
                        naked_identifier: t
                        bracketed:
                          start_bracket: (
                          identifier_list:
                            naked_identifier: c1
                          end_bracket: )
          end_bracket: )
- statement_terminator: ;
