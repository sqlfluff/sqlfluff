# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 3f04effaf49dfa0f1afd11ac84499c027bf111688b2f064b046e1d8549f65e29
file:
- statement:
    begin_end_block:
    - declare_segment:
      - keyword: DECLARE
      - cursor_variable:
        - keyword: TYPE
        - naked_identifier: empcurtyp
        - keyword: IS
        - keyword: REF
        - keyword: CURSOR
        - keyword: RETURN
        - row_type_reference:
            table_reference:
              naked_identifier: employees
            binary_operator: '%'
            keyword: ROWTYPE
      - statement_terminator: ;
      - cursor_variable:
        - keyword: TYPE
        - naked_identifier: genericcurtyp
        - keyword: IS
        - keyword: REF
        - keyword: CURSOR
      - statement_terminator: ;
      - naked_identifier: cursor1
      - data_type:
          data_type_identifier: empcurtyp
      - statement_terminator: ;
      - naked_identifier: cursor2
      - data_type:
          data_type_identifier: genericcurtyp
      - statement_terminator: ;
      - naked_identifier: my_cursor
      - data_type:
          data_type_identifier: SYS_REFCURSOR
      - statement_terminator: ;
      - cursor_variable:
        - keyword: TYPE
        - naked_identifier: deptcurtyp
        - keyword: IS
        - keyword: REF
        - keyword: CURSOR
        - keyword: RETURN
        - row_type_reference:
            table_reference:
              naked_identifier: departments
            binary_operator: '%'
            keyword: ROWTYPE
      - statement_terminator: ;
      - naked_identifier: dept_cv
      - data_type:
          data_type_identifier: deptcurtyp
      - statement_terminator: ;
    - keyword: BEGIN
    - statement:
        'null':
          keyword: 'NULL'
          statement_terminator: ;
    - keyword: END
    - statement_terminator: ;
    - binary_operator: /
- statement:
    begin_end_block:
    - declare_segment:
      - keyword: DECLARE
      - record_type:
        - keyword: TYPE
        - naked_identifier: EmpRecTyp
        - keyword: IS
        - keyword: RECORD
        - bracketed:
          - start_bracket: (
          - naked_identifier: employee_id
          - data_type:
              data_type_identifier: NUMBER
          - comma: ','
          - naked_identifier: last_name
          - data_type:
              data_type_identifier: VARCHAR2
              bracketed_arguments:
                bracketed:
                  start_bracket: (
                  numeric_literal: '25'
                  end_bracket: )
          - comma: ','
          - naked_identifier: salary
          - data_type:
              data_type_identifier: NUMBER
              bracketed_arguments:
                bracketed:
                - start_bracket: (
                - numeric_literal: '8'
                - comma: ','
                - numeric_literal: '2'
                - end_bracket: )
          - end_bracket: )
      - statement_terminator: ;
      - cursor_variable:
        - keyword: TYPE
        - naked_identifier: EmpCurTyp
        - keyword: IS
        - keyword: REF
        - keyword: CURSOR
        - keyword: RETURN
        - object_reference:
            naked_identifier: EmpRecTyp
      - statement_terminator: ;
      - naked_identifier: emp_cv
      - data_type:
          data_type_identifier: EmpCurTyp
      - statement_terminator: ;
    - keyword: BEGIN
    - statement:
        'null':
          keyword: 'NULL'
          statement_terminator: ;
    - keyword: END
    - statement_terminator: ;
    - binary_operator: /
- statement:
    begin_end_block:
    - declare_segment:
      - keyword: DECLARE
      - naked_identifier: sal
      - column_type_reference:
          column_reference:
          - naked_identifier: employees
          - dot: .
          - naked_identifier: salary
          binary_operator: '%'
          keyword: TYPE
      - statement_terminator: ;
      - naked_identifier: sal_multiple
      - column_type_reference:
          column_reference:
          - naked_identifier: employees
          - dot: .
          - naked_identifier: salary
          binary_operator: '%'
          keyword: TYPE
      - statement_terminator: ;
      - naked_identifier: factor
      - data_type:
          data_type_identifier: INTEGER
      - colon: ':'
      - comparison_operator:
          raw_comparison_operator: '='
      - expression:
          numeric_literal: '2'
      - statement_terminator: ;
      - naked_identifier: cv
      - data_type:
          data_type_identifier: SYS_REFCURSOR
      - statement_terminator: ;
    - keyword: BEGIN
    - statement:
        open_for:
        - keyword: OPEN
        - naked_identifier: cv
        - keyword: FOR
        - select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  naked_identifier: salary
            - comma: ','
            - select_clause_element:
                expression:
                - column_reference:
                    naked_identifier: salary
                - binary_operator: '*'
                - column_reference:
                    naked_identifier: factor
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: employees
            where_clause:
              keyword: WHERE
              expression:
                column_reference:
                  naked_identifier: job_id
                keyword: LIKE
                quoted_literal: "'AD_%'"
    - statement_terminator: ;
    - statement:
        loop_statement:
        - keyword: LOOP
        - statement:
            fetch:
              keyword: FETCH
              naked_identifier: cv
              into_clause:
              - keyword: INTO
              - naked_identifier: sal
              - comma: ','
              - naked_identifier: sal_multiple
        - statement_terminator: ;
        - statement:
            exit:
            - keyword: EXIT
            - keyword: WHEN
            - expression:
                naked_identifier: cv
                binary_operator: '%'
                keyword: NOTFOUND
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'factor = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: factor
                  end_bracket: )
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal          = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal
                  end_bracket: )
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal_multiple = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal_multiple
                  end_bracket: )
        - statement_terminator: ;
        - statement:
            assignment_segment:
              object_reference:
                naked_identifier: factor
              colon: ':'
              comparison_operator:
                raw_comparison_operator: '='
              expression:
                column_reference:
                  naked_identifier: factor
                binary_operator: +
                numeric_literal: '1'
              statement_terminator: ;
        - keyword: END
        - keyword: LOOP
        - statement_terminator: ;
    - statement:
        close:
          keyword: CLOSE
          naked_identifier: cv
    - statement_terminator: ;
    - keyword: END
    - statement_terminator: ;
    - binary_operator: /
- statement:
    begin_end_block:
    - declare_segment:
      - keyword: DECLARE
      - naked_identifier: sal
      - column_type_reference:
          column_reference:
          - naked_identifier: employees
          - dot: .
          - naked_identifier: salary
          binary_operator: '%'
          keyword: TYPE
      - statement_terminator: ;
      - naked_identifier: sal_multiple
      - column_type_reference:
          column_reference:
          - naked_identifier: employees
          - dot: .
          - naked_identifier: salary
          binary_operator: '%'
          keyword: TYPE
      - statement_terminator: ;
      - naked_identifier: factor
      - data_type:
          data_type_identifier: INTEGER
      - colon: ':'
      - comparison_operator:
          raw_comparison_operator: '='
      - expression:
          numeric_literal: '2'
      - statement_terminator: ;
      - naked_identifier: cv
      - data_type:
          data_type_identifier: SYS_REFCURSOR
      - statement_terminator: ;
    - keyword: BEGIN
    - statement:
        function:
          function_name:
            naked_identifier: DBMS_OUTPUT
            dot: .
            function_name_identifier: PUT_LINE
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                quoted_literal: "'factor = '"
                binary_operator:
                - pipe: '|'
                - pipe: '|'
                column_reference:
                  naked_identifier: factor
              end_bracket: )
    - statement_terminator: ;
    - statement:
        open_for:
        - keyword: OPEN
        - naked_identifier: cv
        - keyword: FOR
        - select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  naked_identifier: salary
            - comma: ','
            - select_clause_element:
                expression:
                - column_reference:
                    naked_identifier: salary
                - binary_operator: '*'
                - column_reference:
                    naked_identifier: factor
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: employees
            where_clause:
              keyword: WHERE
              expression:
                column_reference:
                  naked_identifier: job_id
                keyword: LIKE
                quoted_literal: "'AD_%'"
    - statement_terminator: ;
    - statement:
        loop_statement:
        - keyword: LOOP
        - statement:
            fetch:
              keyword: FETCH
              naked_identifier: cv
              into_clause:
              - keyword: INTO
              - naked_identifier: sal
              - comma: ','
              - naked_identifier: sal_multiple
        - statement_terminator: ;
        - statement:
            exit:
            - keyword: EXIT
            - keyword: WHEN
            - expression:
                naked_identifier: cv
                binary_operator: '%'
                keyword: NOTFOUND
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal          = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal
                  end_bracket: )
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal_multiple = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal_multiple
                  end_bracket: )
        - statement_terminator: ;
        - keyword: END
        - keyword: LOOP
        - statement_terminator: ;
    - statement:
        assignment_segment:
          object_reference:
            naked_identifier: factor
          colon: ':'
          comparison_operator:
            raw_comparison_operator: '='
          expression:
            column_reference:
              naked_identifier: factor
            binary_operator: +
            numeric_literal: '1'
          statement_terminator: ;
    - statement:
        function:
          function_name:
            naked_identifier: DBMS_OUTPUT
            dot: .
            function_name_identifier: PUT_LINE
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                quoted_literal: "'factor = '"
                binary_operator:
                - pipe: '|'
                - pipe: '|'
                column_reference:
                  naked_identifier: factor
              end_bracket: )
    - statement_terminator: ;
    - statement:
        open_for:
        - keyword: OPEN
        - naked_identifier: cv
        - keyword: FOR
        - select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  naked_identifier: salary
            - comma: ','
            - select_clause_element:
                expression:
                - column_reference:
                    naked_identifier: salary
                - binary_operator: '*'
                - column_reference:
                    naked_identifier: factor
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: employees
            where_clause:
              keyword: WHERE
              expression:
                column_reference:
                  naked_identifier: job_id
                keyword: LIKE
                quoted_literal: "'AD_%'"
    - statement_terminator: ;
    - statement:
        loop_statement:
        - keyword: LOOP
        - statement:
            fetch:
              keyword: FETCH
              naked_identifier: cv
              into_clause:
              - keyword: INTO
              - naked_identifier: sal
              - comma: ','
              - naked_identifier: sal_multiple
        - statement_terminator: ;
        - statement:
            exit:
            - keyword: EXIT
            - keyword: WHEN
            - expression:
                naked_identifier: cv
                binary_operator: '%'
                keyword: NOTFOUND
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal          = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal
                  end_bracket: )
        - statement_terminator: ;
        - statement:
            function:
              function_name:
                naked_identifier: DBMS_OUTPUT
                dot: .
                function_name_identifier: PUT_LINE
              function_contents:
                bracketed:
                  start_bracket: (
                  expression:
                    quoted_literal: "'sal_multiple = '"
                    binary_operator:
                    - pipe: '|'
                    - pipe: '|'
                    column_reference:
                      naked_identifier: sal_multiple
                  end_bracket: )
        - statement_terminator: ;
        - keyword: END
        - keyword: LOOP
        - statement_terminator: ;
    - statement:
        close:
          keyword: CLOSE
          naked_identifier: cv
    - statement_terminator: ;
    - keyword: END
    - statement_terminator: ;
    - binary_operator: /
- statement:
    begin_end_block:
    - declare_segment:
      - keyword: DECLARE
      - naked_identifier: v1
      - data_type:
          naked_identifier: pkg
          dot: .
          data_type_identifier: mytab
      - statement_terminator: ;
      - naked_identifier: v2
      - data_type:
          naked_identifier: pkg
          dot: .
          data_type_identifier: rec
      - statement_terminator: ;
      - naked_identifier: c1
      - data_type:
          data_type_identifier: SYS_REFCURSOR
      - statement_terminator: ;
    - keyword: BEGIN
    - statement:
        function:
          function_name:
            function_name_identifier: v1
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                numeric_literal: '1'
              end_bracket: )
    - statement:
        assignment_segment:
          dot: .
          object_reference:
            naked_identifier: f1
          colon: ':'
          comparison_operator:
            raw_comparison_operator: '='
          expression:
            numeric_literal: '1'
          statement_terminator: ;
    - statement:
        function:
          function_name:
            function_name_identifier: v1
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                numeric_literal: '1'
              end_bracket: )
    - statement:
        assignment_segment:
          dot: .
          object_reference:
            naked_identifier: f2
          colon: ':'
          comparison_operator:
            raw_comparison_operator: '='
          expression:
            quoted_literal: "'one'"
          statement_terminator: ;
    - statement:
        open_for:
        - keyword: OPEN
        - naked_identifier: c1
        - keyword: FOR
        - select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    function:
                      function_name:
                        function_name_identifier: TABLE
                      function_contents:
                        bracketed:
                          start_bracket: (
                          expression:
                            column_reference:
                              naked_identifier: v1
                          end_bracket: )
    - statement_terminator: ;
    - statement:
        fetch:
          keyword: FETCH
          naked_identifier: c1
          into_clause:
            keyword: INTO
            naked_identifier: v2
    - statement_terminator: ;
    - statement:
        close:
          keyword: CLOSE
          naked_identifier: c1
    - statement_terminator: ;
    - statement:
        function:
          function_name:
            naked_identifier: DBMS_OUTPUT
            dot: .
            function_name_identifier: PUT_LINE
          function_contents:
            bracketed:
              start_bracket: (
              expression:
              - quoted_literal: "'Values in record are '"
              - binary_operator:
                - pipe: '|'
                - pipe: '|'
              - column_reference:
                - naked_identifier: v2
                - dot: .
                - naked_identifier: f1
              - binary_operator:
                - pipe: '|'
                - pipe: '|'
              - quoted_literal: "' and '"
              - binary_operator:
                - pipe: '|'
                - pipe: '|'
              - column_reference:
                - naked_identifier: v2
                - dot: .
                - naked_identifier: f2
              end_bracket: )
    - statement_terminator: ;
    - keyword: END
    - statement_terminator: ;
    - binary_operator: /
