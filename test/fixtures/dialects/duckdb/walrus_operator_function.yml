# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: b19e62519c3ac76b2f73c74fdbb783e3571281a50391126b2ed6ef01f2792ca1
file:
- statement:
    create_view_statement:
    - keyword: create
    - keyword: view
    - table_reference:
        naked_identifier: v
    - keyword: as
    - select_statement:
        select_clause:
        - keyword: select
        - select_clause_element:
            column_reference:
            - naked_identifier: t
            - dot: .
            - naked_identifier: id
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                function_name_identifier: struct_pack
              function_contents:
                bracketed:
                  start_bracket: (
                  named_argument:
                    naked_identifier: val
                    assignment_operator: :=
                    expression:
                      column_reference:
                      - naked_identifier: t
                      - dot: .
                      - naked_identifier: val
                  end_bracket: )
            alias_expression:
              keyword: as
              naked_identifier: s
        from_clause:
          keyword: from
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: struct_insert
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  object_literal:
                    start_curly_bracket: '{'
                    object_literal_element:
                      quoted_literal: "'a'"
                      colon: ':'
                      numeric_literal: '1'
                    end_curly_bracket: '}'
                comma: ','
                named_argument:
                  naked_identifier: b
                  assignment_operator: :=
                  expression:
                    numeric_literal: '2'
                end_bracket: )
- statement_terminator: ;
