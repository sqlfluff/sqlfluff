# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: f11de74d2f2f8cb2bc991851be5e886df97b3eb0910085182f08fdf300a0eee5
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            list_comprehension:
            - start_square_bracket: '['
            - expression:
                function:
                  function_name:
                    function_name_identifier: lower
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          naked_identifier: x
                      end_bracket: )
            - keyword: FOR
            - parameter: x
            - keyword: IN
            - expression:
                column_reference:
                  naked_identifier: strings
            - end_square_bracket: ']'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                  keyword: VALUES
                  bracketed:
                    start_bracket: (
                    expression:
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'Hello'"
                      - comma: ','
                      - quoted_literal: "''"
                      - comma: ','
                      - quoted_literal: "'World'"
                      - end_square_bracket: ']'
                    end_bracket: )
              end_bracket: )
            alias_expression:
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                  naked_identifier: strings
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            list_comprehension:
            - start_square_bracket: '['
            - expression:
                function:
                  function_name:
                    function_name_identifier: upper
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          naked_identifier: x
                      end_bracket: )
            - keyword: FOR
            - parameter: x
            - keyword: IN
            - expression:
                column_reference:
                  naked_identifier: strings
            - keyword: IF
            - expression:
                function:
                  function_name:
                    function_name_identifier: len
                  function_contents:
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          naked_identifier: x
                      end_bracket: )
                comparison_operator:
                  raw_comparison_operator: '>'
                numeric_literal: '0'
            - end_square_bracket: ']'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                  keyword: VALUES
                  bracketed:
                    start_bracket: (
                    expression:
                      array_literal:
                      - start_square_bracket: '['
                      - quoted_literal: "'Hello'"
                      - comma: ','
                      - quoted_literal: "''"
                      - comma: ','
                      - quoted_literal: "'World'"
                      - end_square_bracket: ']'
                    end_bracket: )
              end_bracket: )
            alias_expression:
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                  naked_identifier: strings
                end_bracket: )
- statement_terminator: ;
