# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: af1dd450cf59a08c5871cf146946a66e77c37436ca5e888f17db34928310ba4a
file:
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: FUNCTION
    - keyword: IF
    - keyword: EXISTS
    - function_name:
        function_name_identifier: function1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          data_type:
            data_type_identifier: number
          end_bracket: )
    - keyword: RENAME
    - keyword: TO
    - function_name:
        function_name_identifier: function2
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: FUNCTION
    - keyword: IF
    - keyword: EXISTS
    - function_name:
        function_name_identifier: function2
    - function_parameter_list:
        bracketed:
          start_bracket: (
          data_type:
            data_type_identifier: number
          end_bracket: )
    - keyword: SET
    - keyword: SECURE
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: function3
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: UNSET
    - keyword: COMMENT
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: function
    - function_name:
        function_name_identifier: function1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: FLOAT_PARAM1
          data_type:
            data_type_identifier: FLOAT
          end_bracket: )
    - keyword: SET
    - tag_equals:
      - keyword: TAG
      - tag_reference:
          naked_identifier: TAG1
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value1'"
      - comma: ','
      - tag_reference:
          naked_identifier: TAG2
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value2'"
      - comma: ','
      - tag_reference:
          naked_identifier: TAG3
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value3'"
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: function
    - function_name:
        function_name_identifier: function1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: UNSET
    - keyword: TAG
    - tag_reference:
        naked_identifier: TAG1
    - comma: ','
    - tag_reference:
        naked_identifier: TAG2
    - comma: ','
    - tag_reference:
        naked_identifier: TAG3
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: function
    - function_name:
        function_name_identifier: function1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: SET
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'just a comment'"
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: function
    - function_name:
        function_name_identifier: function1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: UNSET
    - keyword: COMMENT
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: example_function
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: SET
    - external_access_integration_equals:
        keyword: EXTERNAL_ACCESS_INTEGRATIONS
        comparison_operator:
          raw_comparison_operator: '='
        bracketed:
          start_bracket: (
          naked_identifier: my_external_access_integration
          end_bracket: )
    - comma: ','
    - log_level_equals:
      - keyword: LOG_LEVEL
      - comparison_operator:
          raw_comparison_operator: '='
      - keyword: DEBUG
    - comma: ','
    - trace_level_equals:
      - keyword: TRACE_LEVEL
      - comparison_operator:
          raw_comparison_operator: '='
      - keyword: ON_EVENT
    - comma: ','
    - external_access_integration_equals:
        keyword: SECRETS
        comparison_operator:
          raw_comparison_operator: '='
        bracketed:
          start_bracket: (
          quoted_literal: "'cred'"
          comparison_operator:
            raw_comparison_operator: '='
          naked_identifier: oauth_token
          end_bracket: )
    - comma: ','
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'just a comment'"
- statement_terminator: ;
- statement:
    alter_function_statement:
    - keyword: ALTER
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: example_function
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: SET
    - tag_equals:
      - keyword: TAG
      - tag_reference:
          naked_identifier: TAG1
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value1'"
      - comma: ','
      - tag_reference:
          naked_identifier: TAG2
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value2'"
      - comma: ','
      - tag_reference:
          naked_identifier: TAG3
      - comparison_operator:
          raw_comparison_operator: '='
      - quoted_literal: "'value3'"
    - comma: ','
    - external_access_integration_equals:
        keyword: EXTERNAL_ACCESS_INTEGRATIONS
        comparison_operator:
          raw_comparison_operator: '='
        bracketed:
          start_bracket: (
          naked_identifier: my_external_access_integration
          end_bracket: )
    - comma: ','
    - log_level_equals:
      - keyword: LOG_LEVEL
      - comparison_operator:
          raw_comparison_operator: '='
      - keyword: DEBUG
    - comma: ','
    - trace_level_equals:
      - keyword: TRACE_LEVEL
      - comparison_operator:
          raw_comparison_operator: '='
      - keyword: ON_EVENT
    - comma: ','
    - external_access_integration_equals:
        keyword: SECRETS
        comparison_operator:
          raw_comparison_operator: '='
        bracketed:
          start_bracket: (
          quoted_literal: "'cred'"
          comparison_operator:
            raw_comparison_operator: '='
          naked_identifier: oauth_token
          end_bracket: )
    - comma: ','
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'just a comment'"
- statement_terminator: ;
