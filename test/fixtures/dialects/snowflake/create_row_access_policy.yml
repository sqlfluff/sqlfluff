# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 1a0a2037d2d40af831eadf08d1c019c8b05d457e56b4559ead0c4fbe00a339a2
file:
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: TEXT
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'FALSE'
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
    - keyword: COMMENT
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'My Comment'"
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - naked_identifier: my_access_policy
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
    - keyword: COMMENT
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'My Comment'"
- statement_terminator: ;
- statement:
    create_row_access_policy_statement:
    - keyword: CREATE
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - quoted_identifier: '"My-Access-Policy"'
    - keyword: AS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: val
          data_type:
            data_type_identifier: VARCHAR
          end_bracket: )
    - keyword: RETURNS
    - keyword: BOOLEAN
    - function_assigner: ->
    - expression:
        boolean_literal: 'TRUE'
- statement_terminator: ;
