# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: e84872ff4aa1a611500bde39d08b67d1432653458091f90ae9238e29cbb0c02b
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
              struct_literal:
                bracketed:
                  start_bracket: (
                  expression:
                    typed_struct_literal:
                      struct_type:
                        keyword: STRUCT
                      struct_literal:
                        bracketed:
                          start_bracket: (
                          numeric_literal: '1'
                          alias_expression:
                            alias_operator:
                              keyword: AS
                            naked_identifier: b
                          end_bracket: )
                  alias_expression:
                    alias_operator:
                      keyword: AS
                    naked_identifier: a
                  end_bracket: )
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: foo
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: ARRAY_AGG
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  typed_struct_literal:
                    struct_type:
                      keyword: STRUCT
                    struct_literal:
                      bracketed:
                      - start_bracket: (
                      - column_reference:
                          naked_identifier: a
                      - alias_expression:
                          alias_operator:
                            keyword: AS
                          naked_identifier: a
                      - comma: ','
                      - column_reference:
                          naked_identifier: b
                      - alias_expression:
                          alias_operator:
                            keyword: AS
                          naked_identifier: b
                      - end_bracket: )
                end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: foo
- statement_terminator: ;
