# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 0a606bf5299bffe7043d8ecbbce6508ede3b2baa5dce3ecfcb388abd82d97859
file:
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
          - naked_identifier: some_table
          - dot: .
          - naked_identifier: foo_id
      - comma: ','
      - select_clause_element:
          expression:
            array_expression:
              function_name:
                function_name_identifier: array
              function_contents:
                bracketed:
                  start_bracket: (
                  select_statement:
                    select_clause:
                      keyword: select
                      select_clause_modifier:
                      - keyword: as
                      - keyword: struct
                      select_clause_element:
                        wildcard_expression:
                          wildcard_identifier:
                            star: '*'
                    from_clause:
                      keyword: from
                      from_expression:
                        from_expression_element:
                          table_expression:
                            table_reference:
                              naked_identifier: another_table
                    where_clause:
                      keyword: where
                      expression:
                      - column_reference:
                        - naked_identifier: another_table
                        - dot: .
                        - naked_identifier: foo_id
                      - comparison_operator:
                          raw_comparison_operator: '='
                      - column_reference:
                        - naked_identifier: some_table
                        - dot: .
                        - naked_identifier: foo_id
                  end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: another_table
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_modifier:
        - keyword: as
        - keyword: struct
      - select_clause_element:
          quoted_literal: "'1'"
          alias_expression:
            keyword: as
            naked_identifier: bb
      - comma: ','
      - select_clause_element:
          numeric_literal: '2'
          alias_expression:
            keyword: as
            naked_identifier: aa
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_modifier:
        - keyword: distinct
        - keyword: as
        - keyword: struct
      - select_clause_element:
          quoted_literal: "'1'"
          alias_expression:
            keyword: as
            naked_identifier: bb
      - comma: ','
      - select_clause_element:
          numeric_literal: '2'
          alias_expression:
            keyword: as
            naked_identifier: aa
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: struct
              struct_literal:
                bracketed:
                - start_bracket: (
                - column_reference:
                  - naked_identifier: bar
                  - dot: .
                  - naked_identifier: bar_id
                - alias_expression:
                    keyword: as
                    naked_identifier: id
                - comma: ','
                - column_reference:
                  - naked_identifier: bar
                  - dot: .
                  - naked_identifier: bar_name
                - alias_expression:
                    keyword: as
                    naked_identifier: bar
                - end_bracket: )
          alias_expression:
            keyword: as
            naked_identifier: bar
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: foo
          join_clause:
          - keyword: left
          - keyword: join
          - from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: bar
          - join_on_condition:
              keyword: 'on'
              expression:
              - column_reference:
                - naked_identifier: bar
                - dot: .
                - naked_identifier: foo_id
              - comparison_operator:
                  raw_comparison_operator: '='
              - column_reference:
                - naked_identifier: foo
                - dot: .
                - naked_identifier: foo_id
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            naked_identifier: col_1
      - comma: ','
      - select_clause_element:
          column_reference:
            naked_identifier: col_2
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: UNNEST
                function_contents:
                  bracketed:
                    start_bracket: (
                    expression:
                      typed_array_literal:
                        array_type:
                          keyword: ARRAY
                          start_angle_bracket: <
                          data_type:
                            struct_type:
                              keyword: STRUCT
                              struct_type_schema:
                              - start_angle_bracket: <
                              - parameter: col_1
                              - data_type:
                                  data_type_identifier: STRING
                              - comma: ','
                              - parameter: col_2
                              - data_type:
                                  data_type_identifier: STRING
                              - end_angle_bracket: '>'
                          end_angle_bracket: '>'
                        array_literal:
                        - start_square_bracket: '['
                        - expression:
                            bracketed:
                            - start_bracket: (
                            - quoted_literal: "'hello'"
                            - comma: ','
                            - quoted_literal: "'world'"
                            - end_bracket: )
                        - comma: ','
                        - expression:
                            bracketed:
                            - start_bracket: (
                            - quoted_literal: "'hi'"
                            - comma: ','
                            - quoted_literal: "'there'"
                            - end_bracket: )
                        - end_square_bracket: ']'
                    end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
                struct_type_schema:
                  start_angle_bracket: <
                  data_type:
                    data_type_identifier: int64
                  end_angle_bracket: '>'
              struct_literal:
                bracketed:
                  start_bracket: (
                  numeric_literal: '5'
                  end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
                struct_type_schema:
                  start_angle_bracket: <
                  data_type:
                    data_type_identifier: date
                  end_angle_bracket: '>'
              struct_literal:
                bracketed:
                  start_bracket: (
                  quoted_literal: '"2011-05-05"'
                  end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
                struct_type_schema:
                - start_angle_bracket: <
                - parameter: x
                - data_type:
                    data_type_identifier: int64
                - comma: ','
                - parameter: y
                - data_type:
                    data_type_identifier: string
                - end_angle_bracket: '>'
              struct_literal:
                bracketed:
                  start_bracket: (
                  numeric_literal: '1'
                  comma: ','
                  column_reference:
                  - naked_identifier: t
                  - dot: .
                  - naked_identifier: str_col
                  end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
                struct_type_schema:
                  start_angle_bracket: <
                  data_type:
                    data_type_identifier: int64
                  end_angle_bracket: '>'
              struct_literal:
                bracketed:
                  start_bracket: (
                  column_reference:
                    naked_identifier: int_col
                  end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            typed_struct_literal:
              struct_type:
                keyword: STRUCT
              struct_literal:
                bracketed:
                - start_bracket: (
                - column_reference:
                    naked_identifier: some_field
                - comma: ','
                - column_reference:
                    naked_identifier: some_other_field
                - end_bracket: )
          alias_expression:
            keyword: AS
            naked_identifier: col
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: table
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: TO_JSON
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  typed_struct_literal:
                    struct_type:
                      keyword: STRUCT
                    struct_literal:
                      bracketed:
                        start_bracket: (
                        end_bracket: )
                end_bracket: )
          alias_expression:
            keyword: AS
            naked_identifier: col
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: table
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
          - bracketed:
              start_bracket: (
              expression:
              - numeric_literal: '1'
              - binary_operator: '*'
              - numeric_literal: '1'
              comma: ','
              numeric_literal: '2'
              end_bracket: )
          - keyword: IN
          - bracketed:
              start_bracket: (
              typed_struct_literal:
                struct_type:
                  keyword: STRUCT
                struct_literal:
                  bracketed:
                  - start_bracket: (
                  - numeric_literal: '1'
                  - alias_expression:
                      keyword: AS
                      naked_identifier: a
                  - comma: ','
                  - numeric_literal: '2'
                  - alias_expression:
                      keyword: AS
                      naked_identifier: b
                  - end_bracket: )
              end_bracket: )
- statement_terminator: ;
