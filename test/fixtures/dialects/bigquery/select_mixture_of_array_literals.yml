# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 1ecaf1f891f1aa2d4a8fc222034bc116a601d0b70b09290aea7d1dd8f8be30e3
file:
  statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          array_literal:
            start_square_bracket: '['
            end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          array_literal:
            start_square_bracket: '['
            boolean_literal: 'false'
            end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          typed_array_literal:
            array_type:
              keyword: ARRAY
              start_angle_bracket: <
              data_type:
                data_type_identifier: BOOLEAN
              end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              boolean_literal: 'false'
              end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          array_literal:
            start_square_bracket: '['
            quoted_literal: "'a'"
            end_square_bracket: ']'
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: strcol1
      - comma: ','
      - select_clause_element:
          typed_array_literal:
            array_type:
              keyword: ARRAY
              start_angle_bracket: <
              data_type:
                data_type_identifier: string
              end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              quoted_literal: "'b'"
              end_square_bracket: ']'
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: strcol2
      - comma: ','
      - select_clause_element:
          array_literal:
            start_square_bracket: '['
            numeric_literal: '1.0'
            end_square_bracket: ']'
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: numcol1
      - comma: ','
      - select_clause_element:
          typed_array_literal:
            array_type:
              keyword: ARRAY
              start_angle_bracket: <
              data_type:
                data_type_identifier: NUMERIC
              end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              numeric_literal: '1.4'
              end_square_bracket: ']'
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: numcol2
      - comma: ','
      - select_clause_element:
          array_literal:
            start_square_bracket: '['
            expression:
              typed_struct_literal:
                struct_type:
                  keyword: STRUCT
                struct_literal:
                  bracketed:
                  - start_bracket: (
                  - quoted_literal: '"Rudisha"'
                  - alias_expression:
                      alias_operator:
                        keyword: AS
                      naked_identifier: name
                  - comma: ','
                  - array_literal:
                    - start_square_bracket: '['
                    - numeric_literal: '23.4'
                    - comma: ','
                    - numeric_literal: '26.3'
                    - comma: ','
                    - numeric_literal: '26.4'
                    - comma: ','
                    - numeric_literal: '26.1'
                    - end_square_bracket: ']'
                  - alias_expression:
                      alias_operator:
                        keyword: AS
                      naked_identifier: splits
                  - end_bracket: )
            end_square_bracket: ']'
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: struct1
      - comma: ','
      - select_clause_element:
          expression:
            column_reference:
            - naked_identifier: col1
            - dot: .
            - naked_identifier: obj1
            semi_structured_expression:
              array_accessor:
                start_square_bracket: '['
                expression:
                  function:
                    function_name:
                      function_name_identifier: safe_offset
                    function_contents:
                      bracketed:
                        start_bracket: (
                        expression:
                          numeric_literal: '1'
                        end_bracket: )
                end_square_bracket: ']'
              dot: .
              naked_identifier: a
          alias_expression:
            alias_operator:
              keyword: AS
            naked_identifier: struct_safe_offset
