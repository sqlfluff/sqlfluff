# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 23a31b8c43b1058987c0db2c34869023ec7cf34b2639281bd1698ce89c703467
file:
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
      - naked_identifier: example_dataset
      - dot: .
      - naked_identifier: example_table
    - bracketed:
        start_bracket: (
        column_definition:
          naked_identifier: x
          data_type:
            data_type_identifier: INT64
        end_bracket: )
    - default_collate:
      - keyword: DEFAULT
      - keyword: COLLATE
      - quoted_literal: "'und:ci'"
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: TABLE
    - table_reference:
      - naked_identifier: example
      - dash: '-'
      - naked_identifier: project
      - dot: .
      - naked_identifier: example_dataset
      - dot: .
      - naked_identifier: example_table
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: x
          data_type:
            data_type_identifier: INT64
          options_segment:
            keyword: OPTIONS
            bracketed:
              start_bracket: (
              parameter: description
              comparison_operator:
                raw_comparison_operator: '='
              quoted_literal: '"example"'
              end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: y
          data_type:
            data_type_identifier: INT64
          options_segment:
            keyword: OPTIONS
            bracketed:
              start_bracket: (
              parameter: description
              comparison_operator:
                raw_comparison_operator: '='
              quoted_literal: '"example"'
              end_bracket: )
      - end_bracket: )
    - default_collate:
      - keyword: DEFAULT
      - keyword: COLLATE
      - quoted_literal: "'und:ci'"
    - cluster_by_segment:
      - keyword: CLUSTER
      - keyword: BY
      - expression:
          column_reference:
            naked_identifier: x
      - comma: ','
      - expression:
          column_reference:
            naked_identifier: y
    - options_segment:
        keyword: OPTIONS
        bracketed:
          start_bracket: (
          parameter: description
          comparison_operator:
            raw_comparison_operator: '='
          quoted_literal: '"example"'
          end_bracket: )
- statement_terminator: ;
