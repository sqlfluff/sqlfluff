# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 01ee90f3a749aefbcf9c0cac6019ffa8026911a6d2cb2c00a92275933b67c112
file:
- statement:
    with_compound_statement:
      keyword: WITH
      common_table_expression:
        naked_identifier: t
        cte_column_list:
          bracketed:
            start_bracket: (
            identifier_list:
            - naked_identifier: col_1
            - comma: ','
            - naked_identifier: col_2
            end_bracket: )
        keyword: AS
        bracketed:
          start_bracket: (
          values_clause:
            keyword: VALUES
            bracketed:
            - start_bracket: (
            - expression:
                quoted_literal: "'08RIX0'"
            - comma: ','
            - expression:
                cast_expression:
                  numeric_literal: '0.435'
                  casting_operator: '::'
                  data_type:
                    keyword: NUMERIC
                    bracketed_arguments:
                      bracketed:
                      - start_bracket: (
                      - numeric_literal: '4'
                      - comma: ','
                      - numeric_literal: '3'
                      - end_bracket: )
            - end_bracket: )
          end_bracket: )
      select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: t
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                  keyword: VALUES
                  bracketed:
                    start_bracket: (
                    expression:
                      numeric_literal: '1'
                    end_bracket: )
              end_bracket: )
            alias_expression:
              alias_operator:
                keyword: AS
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                  naked_identifier: c1
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                - keyword: VALUES
                - bracketed:
                  - start_bracket: (
                  - expression:
                      numeric_literal: '1'
                  - comma: ','
                  - expression:
                      numeric_literal: '2'
                  - end_bracket: )
                - comma: ','
                - bracketed:
                  - start_bracket: (
                  - expression:
                      numeric_literal: '3'
                  - comma: ','
                  - expression:
                      numeric_literal: '4'
                  - end_bracket: )
              end_bracket: )
            alias_expression:
              alias_operator:
                keyword: AS
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                - naked_identifier: c1
                - comma: ','
                - naked_identifier: c2
                end_bracket: )
- statement_terminator: ;
