# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: bcb749032a3d209accc51cfded6115927b42619a7b8f25747bdce7e23e1514a7
file:
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: mleast
    - function_parameter_list:
        bracketed:
          start_bracket: (
          keyword: VARIADIC
          parameter: arr
          data_type:
            keyword: numeric
            start_square_bracket: '['
            end_square_bracket: ']'
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        keyword: numeric
    - function_definition:
        keyword: AS
        quoted_literal: "$$\n    SELECT min($1[i]) FROM generate_subscripts($1, 1)\
          \ g(i);\n$$"
        language_clause:
          keyword: LANGUAGE
          naked_identifier: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: mleast
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  typed_array_literal:
                    keyword: VARIADIC
                    array_type:
                      keyword: ARRAY
                    array_literal:
                    - start_square_bracket: '['
                    - numeric_literal: '10'
                    - comma: ','
                    - numeric_literal:
                        sign_indicator: '-'
                        numeric_literal: '1'
                    - comma: ','
                    - numeric_literal: '5'
                    - comma: ','
                    - numeric_literal: '4.4'
                    - end_square_bracket: ']'
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: mleast
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  cast_expression:
                    typed_array_literal:
                      keyword: VARIADIC
                      array_type:
                        keyword: ARRAY
                      array_literal:
                        start_square_bracket: '['
                        end_square_bracket: ']'
                    casting_operator: '::'
                    data_type:
                      keyword: numeric
                      start_square_bracket: '['
                      end_square_bracket: ']'
                end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: mleast
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  typed_array_literal:
                    keyword: VARIADIC
                    naked_identifier: arr
                    assignment_operator: :=
                    array_type:
                      keyword: ARRAY
                    array_literal:
                    - start_square_bracket: '['
                    - numeric_literal: '10'
                    - comma: ','
                    - numeric_literal:
                        sign_indicator: '-'
                        numeric_literal: '1'
                    - comma: ','
                    - numeric_literal: '5'
                    - comma: ','
                    - numeric_literal: '4.4'
                    - end_square_bracket: ']'
                end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: anyleast
    - function_parameter_list:
        bracketed:
          start_bracket: (
          keyword: VARIADIC
          data_type:
            data_type_identifier: anyarray
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: anyelement
    - function_definition:
        keyword: AS
        quoted_literal: "$$\n    SELECT min($1[i]) FROM generate_subscripts($1, 1)\
          \ g(i);\n$$"
        language_clause:
          keyword: LANGUAGE
          naked_identifier: SQL
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: concat_values
    - function_parameter_list:
        bracketed:
        - start_bracket: (
        - data_type:
            keyword: text
        - comma: ','
        - keyword: VARIADIC
        - data_type:
            data_type_identifier: anyarray
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        keyword: text
    - function_definition:
        keyword: AS
        quoted_literal: "$$\n    SELECT array_to_string($2, $1);\n$$"
        language_clause:
          keyword: LANGUAGE
          naked_identifier: SQL
- statement_terminator: ;
