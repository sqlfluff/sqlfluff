# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: f2ec6c3de951ea1b764a10ac67bddbe60a46994bcfcc6539af64f0fd3b8cd827
file:
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: users
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: username
          data_type:
            data_type_identifier: TEXT
      - comma: ','
      - column_definition:
          naked_identifier: age
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  naked_identifier: age
                comparison_operator:
                  raw_comparison_operator: '>'
                numeric_literal: '18'
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: users
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: username
          data_type:
            data_type_identifier: TEXT
      - comma: ','
      - column_definition:
          naked_identifier: age
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
              - column_reference:
                  naked_identifier: age
              - keyword: IS
              - keyword: NOT
              - null_literal: 'NULL'
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: Persons
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: ID
          data_type:
            data_type_identifier: int
          column_constraint_segment:
          - keyword: NOT
          - keyword: 'NULL'
      - comma: ','
      - column_definition:
          naked_identifier: LastName
          data_type:
            data_type_identifier: varchar
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '255'
                end_bracket: )
          column_constraint_segment:
          - keyword: NOT
          - keyword: 'NULL'
      - comma: ','
      - column_definition:
          naked_identifier: FirstName
          data_type:
            data_type_identifier: varchar
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '255'
                end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: Age
          data_type:
            data_type_identifier: int
      - comma: ','
      - column_definition:
          naked_identifier: City
          data_type:
            data_type_identifier: varchar
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '255'
                end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: CONSTRAINT
          data_type:
            data_type_identifier: CHK_Person
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
              - column_reference:
                  naked_identifier: Age
              - comparison_operator:
                - raw_comparison_operator: '>'
                - raw_comparison_operator: '='
              - numeric_literal: '18'
              - binary_operator: AND
              - column_reference:
                  naked_identifier: City
              - comparison_operator:
                  raw_comparison_operator: '='
              - quoted_literal: "'Sandnes'"
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
